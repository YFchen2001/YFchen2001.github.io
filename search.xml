<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2021/10/31/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<span id="more"></span>
<h2 id="quick-start">Quick Start</h2>
<h3 id="create-a-new-post">Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="run-server">Run server</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="generate-static-files">Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="deploy-to-remote-sites">Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>模拟和高精度</title>
    <url>/2021/10/31/%E6%A8%A1%E6%8B%9F%E5%92%8C%E9%AB%98%E7%B2%BE%E5%BA%A6/</url>
    <content><![CDATA[<p>模拟：即用代码去模拟题目所描述的运行模式</p>
<p>高精度：即可以计算无限大的数，用数组模拟平常的数值运算</p>
<span id="more"></span>
<h2 id="p1045-noip2003-普及组-麦森数">P1045 [NOIP2003 普及组] 麦森数</h2>
<p>题目</p>
<p><img src="https://i.loli.net/2021/10/31/2ybDkfv9NjiSdBC.png" alt="image-20211027151639305" /><img src="https://i.loli.net/2021/10/31/7zoFLPSXRhjrixN.png" alt="image-20211027151654094" /></p>
<p>思路分析：</p>
<p>对应这道题，我们有两个任务：</p>
<ul>
<li>求<span class="math inline">\(2^p-1\)</span>结果的位数</li>
<li>输出后500位的数字；</li>
</ul>
<p>而对于数据量位<span class="math inline">\(1000&lt;p&lt;3100000\)</span>的计算而言，很明显原始的暴力方法会失去作用，且我们的结果需要高精度保存和计算；所以为了加快结果的计算可以利用<code>快速幂</code>技巧（快速幂技巧暂时不会讲解，需要时可自行查阅相关数据）；</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//原地高精度乘法算法：即其乘积的结果顺便会存储在第一个传入的操作数中</span></span><br><span class="line"><span class="comment">//但是要注意的是：对应高精度*高精度的乘法而言，都需要一个辅助数组存储临时结果，所以原不原地性能无法得到改变</span></span><br><span class="line"><span class="comment">//但是如果可以保证两个操作数一定来自不同的内存块，即两个都是不同内存的引用（一个改变不会影响另一个），</span></span><br><span class="line"><span class="comment">//那么就可以减去辅助数组；但因为我们需要求平方，所以下面的b为值传递，不是引用传递</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mul</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp;a, vector&lt;<span class="keyword">int</span>&gt;b)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> alen = a.<span class="built_in">size</span>(), blen = b.<span class="built_in">size</span>();</span><br><span class="line">	<span class="keyword">int</span> aiVal = <span class="number">0</span>;</span><br><span class="line">	<span class="comment">//为了可以原地改变数组，那么就需要改变后的位置不能影响后面的计算；所以我们就需要有高位开始计算；</span></span><br><span class="line">	<span class="comment">//因为高位不会影响低位，而低位会影响高位：(嵌套循环的竖式乘法)；</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = alen<span class="number">-1</span>;i &gt;=<span class="number">0</span>;i -= <span class="number">1</span>) &#123;</span><br><span class="line">		<span class="comment">//因为是用a[i]去乘以b;然后加到前面已经计算的结果中；且我们当前的a[i]在乘的时候，需要将结果存到a[i]中，</span></span><br><span class="line">		<span class="comment">//所以就需要清空a[i]，不让原本的原始对其产生影响</span></span><br><span class="line">		aiVal = a[i];</span><br><span class="line">		a[i] = <span class="number">0</span>;</span><br><span class="line">		<span class="comment">//高精*低精</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = blen<span class="number">-1</span>;j &gt;=<span class="number">0</span>;j-= <span class="number">1</span>) &#123;</span><br><span class="line">			<span class="keyword">while</span> (i + j &gt;= a.<span class="built_in">size</span>()) &#123;</span><br><span class="line">				a.<span class="built_in">push_back</span>(<span class="number">0</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			a[i + j] += aiVal* b[j];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//进位</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; a.<span class="built_in">size</span>()<span class="number">-1</span>;i += <span class="number">1</span>) &#123;</span><br><span class="line">		<span class="keyword">if</span> (a[i] &gt;= <span class="number">10</span>) &#123;</span><br><span class="line">			a[i + <span class="number">1</span>] += a[i] / <span class="number">10</span>;</span><br><span class="line">			a[i] %= <span class="number">10</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//最后一个位的特殊处理</span></span><br><span class="line">	<span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (a.<span class="built_in">back</span>() &gt;= <span class="number">10</span>) &#123;</span><br><span class="line">		temp = a.<span class="built_in">back</span>() / <span class="number">10</span>;</span><br><span class="line">		a.<span class="built_in">back</span>() %= <span class="number">10</span>;</span><br><span class="line">		a.<span class="built_in">push_back</span>(temp);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> p = <span class="number">0</span>;</span><br><span class="line">	cin &gt;&gt; p;</span><br><span class="line">	<span class="comment">//res为结果；mulNum为2的幂</span></span><br><span class="line">	vector&lt;<span class="keyword">int</span>&gt;res;</span><br><span class="line">	vector&lt;<span class="keyword">int</span>&gt;mulNum;</span><br><span class="line">	mulNum.<span class="built_in">push_back</span>(<span class="number">2</span>);</span><br><span class="line">	res.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">	<span class="comment">//快速幂模板</span></span><br><span class="line">	<span class="keyword">while</span> (p != <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">if</span> (p &amp; <span class="number">1</span>) &#123;</span><br><span class="line">			<span class="built_in">mul</span>(res, mulNum);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">mul</span>(mulNum, mulNum);</span><br><span class="line">		p &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//输出</span></span><br><span class="line">	res[<span class="number">0</span>] -= <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; res.<span class="built_in">size</span>()<span class="number">-1</span>;i+=<span class="number">1</span>) &#123;</span><br><span class="line">		<span class="keyword">if</span> (res[i] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		res[i] += <span class="number">10</span>;</span><br><span class="line">		res[i - <span class="number">1</span>] -= <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; res.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">500</span><span class="number">-1</span>;i&gt;=<span class="number">0</span>;i -= <span class="number">1</span>) &#123;</span><br><span class="line">		count += <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span> (i &gt;= res.<span class="built_in">size</span>()) &#123;</span><br><span class="line">			cout &lt;&lt; <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			cout&lt;&lt;res[i];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (count == <span class="number">50</span>) &#123;</span><br><span class="line">			cout &lt;&lt; endl;</span><br><span class="line">			count = <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure>
<img src="https://i.loli.net/2021/10/31/1qRgzVIGWm7TtbC.png" alt="image-20211027153353214" /><figcaption aria-hidden="true">image-20211027153353214</figcaption>
</figure>
<p>很明显，我们无法效率过低了，但是对于幂的求解，快速幂的性能已经很好了，主要的开销应该是在高精度乘法中，而高精度的乘法效率的提高就不得不提到<code>压位</code>技巧了==（压位技巧见下方知识拓展）==，对于压位，即一次性处理多位（推荐为10的幂，且因为int的数据量大小问题，所以压位要小心，且对于int压4位，long long 压8位）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//	压4位</span></span><br><span class="line"><span class="comment">//整体代码基本都一样，就进位处理的时候有些特别</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quickMul</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; a, vector&lt;<span class="keyword">int</span>&gt;b)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> alen = a.<span class="built_in">size</span>(), blen = b.<span class="built_in">size</span>();</span><br><span class="line">	<span class="keyword">int</span> aiVal = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = alen - <span class="number">1</span>;i &gt;= <span class="number">0</span>;i -= <span class="number">1</span>) &#123;</span><br><span class="line">		aiVal = a[i];</span><br><span class="line">		a[i] = <span class="number">0</span>;</span><br><span class="line">		<span class="comment">//高精*低精</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = blen - <span class="number">1</span>;j &gt;= <span class="number">0</span>;j -= <span class="number">1</span>) &#123;</span><br><span class="line">			<span class="keyword">while</span> (i + j &gt;= a.<span class="built_in">size</span>()) &#123;</span><br><span class="line">				a.<span class="built_in">push_back</span>(<span class="number">0</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			a[i + j] += aiVal * b[j];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//进位（压位和普通的高精乘法就体现在进位以及到时的显示）</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; a.<span class="built_in">size</span>() - <span class="number">1</span>;i += <span class="number">1</span>) &#123;</span><br><span class="line">		<span class="keyword">if</span> (a[i] &gt;= <span class="number">10000</span>) &#123;</span><br><span class="line">			a[i + <span class="number">1</span>] += a[i] / <span class="number">10000</span>;</span><br><span class="line">			a[i] %= <span class="number">10000</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//最后一个位的特殊处理</span></span><br><span class="line">	<span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (a.<span class="built_in">back</span>() &gt;= <span class="number">10000</span>) &#123;</span><br><span class="line">		temp = a.<span class="built_in">back</span>() / <span class="number">10000</span>;</span><br><span class="line">		a.<span class="built_in">back</span>() %= <span class="number">10000</span>;</span><br><span class="line">		a.<span class="built_in">push_back</span>(temp);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//注意：在显示操作中，如果是压位计算的，那么其要注意处理最高位位，其他位的前置零不能忽略，即如果位32，且压4位，那么显示是就需要显示0032；</span></span><br><span class="line">cout &lt;&lt; <span class="built_in">setw</span>(<span class="number">4</span>) &lt;&lt; <span class="built_in">setfill</span>(<span class="string">&#x27;0&#x27;</span>) &lt;&lt; res[i];</span><br></pre></td></tr></table></figure>
<p>但是这道题其实基本不能用，因为其在显示时的要求太多，压位后要控制这些东西比较困难</p>
<p>这里推荐纯压位解法：https://www.luogu.com.cn/blog/812-xiao-wen/solution-p1045；</p>
<h4 id="那么我们还能怎么加速呢">那么我们还能怎么加速呢？</h4>
<p>首先我们需要很清楚的自动对于一般的计算幂以及高精乘法的优化已经有了，或是无法实现，但这道题还没解出，那么就证明其这道题还有一些别的特殊点，我们回头再看一下题目，发现对于这道题，我们就仅仅需要后500位的结果即可，且我们要注意一个点：乘法的低位会影响高位，但高位不会影响低位，所以我们在计算时，就计算到500位即可，后面的就不用在遍历下去；</p>
<p>我们看一下其中一个超时测试案例:in--&gt;756839;</p>
<p>我们可以发现如果就计算到后500位，那么计算量是减少很多的，但是又出现一个问题，就是有没有结果位数无法求出？</p>
<p>那我们就从这道题的特殊性出发即<code>2^p-1</code>;对于这个数其实我们知道它二进制有多少位，因为其表示形式位<span class="math inline">\(2^p\)</span>;所以我们是否可以将其转化位<span class="math inline">\(10^k\)</span>呢？ <span class="math display">\[
推算
令k为所需要求的位数；由题意得：\\
10^k&gt;2^p&gt;10^{k-1}\\
k&gt;{log_{10}2^p}=P*log_{10}2&gt;k+1;\\
由于k取最接近得正整数:k=\lfloor P*log_{10}2\rfloor+
\]</span></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> SIZE = <span class="number">501</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//高精度乘法，有辅助数组，乘法的副作用作用域第一个参数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mul2</span><span class="params">(<span class="keyword">int</span>*res,<span class="keyword">int</span>*a,<span class="keyword">int</span>*sav)</span> </span>&#123;</span><br><span class="line">	<span class="comment">//cout &lt;&lt; sizeof(sav) &lt;&lt; endl;</span></span><br><span class="line">	<span class="comment">//注意：memset,mencpy等函数的第三个size量为字节长度，即int为4字节最好就size*sizeof(type);</span></span><br><span class="line">	<span class="built_in">memset</span>(sav, <span class="number">0</span>, SIZE*<span class="number">4</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; SIZE;i += <span class="number">1</span>) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; SIZE&amp;&amp;i-j&gt;=<span class="number">0</span>&amp;&amp;i-j&lt;SIZE;j += <span class="number">1</span>) &#123;</span><br><span class="line">			sav[i] += a[j] * res[i - j];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; SIZE - <span class="number">1</span>;i += <span class="number">1</span>) &#123;</span><br><span class="line">		<span class="keyword">if</span> (sav[i] &gt;= <span class="number">10</span>) &#123;</span><br><span class="line">			sav[i + <span class="number">1</span>] += sav[i] / <span class="number">10</span>;</span><br><span class="line">			sav[i] %= <span class="number">10</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">memcpy</span>(res, sav, SIZE*<span class="number">4</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> p = <span class="number">0</span>;</span><br><span class="line">	cin &gt;&gt; p;</span><br><span class="line">	<span class="comment">//预先计算总次数</span></span><br><span class="line">	cout &lt;&lt; (<span class="keyword">int</span>)(p * <span class="built_in">log10</span>(<span class="number">2</span>))+<span class="number">1</span> &lt;&lt; endl;</span><br><span class="line">	<span class="comment">//后面如果为了方便调试可以尽量用STL的容器</span></span><br><span class="line">	<span class="keyword">int</span> res[<span class="number">501</span>] = &#123; <span class="number">0</span> &#125;;<span class="comment">//结果高精度数组</span></span><br><span class="line">	<span class="keyword">int</span> sav[<span class="number">501</span>] = &#123; <span class="number">0</span> &#125;;<span class="comment">//辅助数组</span></span><br><span class="line">	<span class="keyword">int</span> a[<span class="number">501</span>] = &#123; <span class="number">0</span> &#125;;<span class="comment">//幂数组</span></span><br><span class="line">	res[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">	a[<span class="number">0</span>] = <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">while</span> (p) &#123;</span><br><span class="line">		<span class="keyword">if</span> (p &amp; <span class="number">1</span> == <span class="number">1</span>) &#123;</span><br><span class="line">			<span class="built_in">mul2</span>(res, a, sav);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">mul2</span>(a,a,sav);</span><br><span class="line">		p &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	res[<span class="number">0</span>] -= <span class="number">1</span>;</span><br><span class="line">	<span class="comment">/*int top = 0;</span></span><br><span class="line"><span class="comment">	while (res[top] &lt; 0&amp;&amp;top&lt;SIZE) &#123;</span></span><br><span class="line"><span class="comment">		res[top] += 10;</span></span><br><span class="line"><span class="comment">		res[top + 1] -= 1;</span></span><br><span class="line"><span class="comment">	&#125;*/</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">500</span> - <span class="number">1</span>,j=<span class="number">1</span>;i &gt;= <span class="number">0</span>;i -= <span class="number">1</span>,j+=<span class="number">1</span>) &#123;</span><br><span class="line">		cout &lt;&lt; res[i];</span><br><span class="line">		<span class="keyword">if</span> (j % <span class="number">50</span>==<span class="number">0</span>) &#123;</span><br><span class="line">			cout &lt;&lt; endl;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure>
<img src="https://i.loli.net/2021/10/31/1FL3Q9WZwHkvqKR.png" alt="image-20211027230136710" /><figcaption aria-hidden="true">image-20211027230136710</figcaption>
</figure>
<h1 id="p1249-最大乘积">P1249 最大乘积</h1>
<p>题目</p>
<figure>
<img src="https://i.loli.net/2021/10/31/bKmGTDzZvaCle1u.png" alt="image-20211027231214308" /><figcaption aria-hidden="true">image-20211027231214308</figcaption>
</figure>
<p>思路分析：</p>
<p>对于这道题:首先可能意识到的就是动态规划去解（当然这是一个01背包问题），可以通过动态规划去解，当我们首先先来看另外一个思路</p>
<h3 id="不重复拆分积最大问题">不重复拆分积最大问题</h3>
<p>因为是要积最大，所以就需要拆出来的因数相距最小,因为<span class="math inline">\(（a-i）*(a+i)=a^2-i^2&lt;a^2\)</span>,所以就需要拆出来的数相距更小，另外因为可以拆分成多个数，那么我们要拆分成多少个数比较好呢？</p>
<p>对于这个问题，我目前无法给予证明，但就网上资料表明：</p>
<ul>
<li>对于一个数而言，如果其拆的数可以重复，那么就尽可能的拆分成3，以及至多一个2</li>
<li>但如果其拆的数不可重复，那么就可以在保证拆的数相距较小的前提下，尽可能多的拆分出一些数过来；</li>
</ul>
<p>对于这道题，就是不可重复的，所以我们要如何寻找满足上面要求的情况呢？</p>
<p>答案就是：可以由2开始遍历，然后逐渐累计，直到超过n,但是这就又出来了，一个问题，那就是如何</p>
]]></content>
      <categories>
        <category>luogu，普及组</category>
      </categories>
      <tags>
        <tag>模拟</tag>
        <tag>高精度</tag>
      </tags>
  </entry>
  <entry>
    <title>贪心专题（二）</title>
    <url>/2021/10/31/%E8%B4%AA%E5%BF%83/%E8%B4%AA%E5%BF%83%E4%B8%AD%E7%AD%89%E9%A2%98/</url>
    <content><![CDATA[<p>中等题</p>
<p>渐深领略贪心的美</p>
<span id="more"></span>
<h2 id="跳跃-游戏">45.跳跃 游戏||</h2>
<p>题目</p>
<figure>
<img src="贪心中等题.assets/image-20211009020722509.png" alt="image-20211009020722509" /><figcaption aria-hidden="true">image-20211009020722509</figcaption>
</figure>
<p>方法一：贪心</p>
<p>对于这道题，我们需要找到最小的步数，那么我们要如何才能找到最小步数呢？</p>
<ul>
<li>一个很直接的想法就是：有后往前遍历，因为我们是要到达最后一个结点的，所以我们就可以由最后的结点开始，寻找可以跳到该位置的最前的位置，作为其上一次起跳点，然后依此类推，得到其步数，但对于这个想法其每次寻找上一次起跳点都需要O(n);且我们会重复遍历很多的无效位置；且我们没有证明这个为什么就一定可以得到最短的路径</li>
</ul>
<p>首先，我们先来看一下，这个题目约束下跳跃间的关系是什么？</p>
<ul>
<li><p>假设我们在已经在位置i上，那么我们的起跳点就可以为i&lt;j&lt;=i+nums[i];假设我们这一步跳到g;那么其再下一次的起跳点就为g&lt;=i+nums[i]&lt;H&lt;g+nums[g];</p></li>
<li><p>为什么g+nums[g]&gt;i+nums[i]?</p>
<p>因为我们一定能够到达最后，所以一定存在g可以使得g+nums[g]&gt;i+nums[i];且因为我们是要保证跳的次数最少，所以如果我们选择了一个j,且j+nums[j]&lt;i+nums[i];那么我们就需要再额外花费一步去跳离i+nums[i]，所以其就可以选择g+nums[g]最大的那个点去跳，因为那样可以保证我们的起跳点更多，且离终点更近，另外这个也可以其他点可能跳的下一次位置</p></li>
<li><p>为什么我们下一次的起跳点一定大于i+nums[i],而不是大于g?</p>
<p>因为假设我们第二次的起跳点位k,且g&lt;k&lt;i+nums[i];那么我们就需要额外花费一次去跳离g+nums[g];因为一定可以到达最后，所以一定存在第三次起跳点z，使得z+nums[z]&gt;g+nums[g]；但是由前面可知，我们是选用g+nums[g]最大的（i&lt;g&lt;i+nums[i]），所以其z+nums[z]不可能大于g+nums[g]；所以其下一次起跳的位置一定大于i+nums[i];</p></li>
</ul>
<p>换句话讲，我们每次起跳，就可以废掉其所能到达的最大位置之前的所有位置，因为其下一次起跳点一定在最大位置之后</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">jump</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//如果长度小于2，即不用走就可以到达结尾</span></span><br><span class="line">        <span class="keyword">if</span>(nums.length&lt;<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//步数</span></span><br><span class="line">        <span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line">        <span class="comment">//当前的起跳点范围</span></span><br><span class="line">        <span class="keyword">int</span> curMax=nums[<span class="number">0</span>]+<span class="number">0</span>;</span><br><span class="line">        <span class="comment">//下一个起跳点的范围</span></span><br><span class="line">        <span class="keyword">int</span> maxDiscount=curMax;</span><br><span class="line">        <span class="comment">//注意：我们的遍历范围是0~nums.length-1;因为我们最后一个的起跳点只要有包含最后那么就证明是可以到达的，就可以结束了</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length-<span class="number">1</span>; i++) &#123;</span><br><span class="line">            maxDiscount=Math.max(maxDiscount,i+nums[i]);</span><br><span class="line">            <span class="comment">//到达最大范围，就废掉前面的，继续遍历后面的</span></span><br><span class="line">            <span class="keyword">if</span>(i==curMax)&#123;</span><br><span class="line">                count+=<span class="number">1</span>;</span><br><span class="line">                curMax=maxDiscount;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//最后一次不会进入判断，所以需要额外增加一个</span></span><br><span class="line">        count+=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="加油站">134.加油站</h2>
<p>题目</p>
<p><img src="贪心中等题.assets/image-20211009233508483.png" alt="image-20211009233508483" /><img src="贪心中等题.assets/image-20211009233528089.png" alt="image-20211009233528089" /></p>
<p>注意：其仅仅只能选择起始点，而过程就必须按部就班，按相邻的点去遍历即可，到时要记得数组是环形的，所以就必须在遍历到结尾时可以自动从节点出发，所以下标就需要有取模操作，以防止越界</p>
<h3 id="方法一贪心局部解-全局解">方法一：贪心（局部解-&gt;全局解）</h3>
<p>对于这道题，最简单的就是枚举每个位置，将其作为起点，然后遍历一圈，如果中间油量为负，即<span class="math inline">\(\sum_i^{i+gas.length}(gas[i]-cost[i])\)</span>;</p>
<p>那么该位置就一定不是起点。但是很明显这个思路会有很多不合理的枚举，比如一开始就是负的，就可以直接跳到；或是因为这道题我们必须保证在行走的过程中起每个时刻的油量必须大于等于0，所以我们在由一个<span class="math inline">\(gas(i)-cost(i)&gt;0\)</span>的位置出发，到最后的<span class="math inline">\(\sum_i^{i+j}(gas(i)-cost(j))&lt;0\)</span>的位置，我们就证明了这个起点不可以，且再由这个我们可以推出<span class="math inline">\([i,j)\)</span>中的位置均不可能成为起点 <span class="math display">\[
证明:因为我们需要保证我们行走过程每个时段的油量均不小于0， \\
所以既然我们可以遍历到j，就证明了遍历中途\sum_i^{i+k}(gas(i)-cost(i))&gt;0成立; \\
假设\{z,k=z+1\}\in[i,j]，且gas[k]-cost[k]&gt;=0, \\
那么\sum_i^{i+z}(gas(i)-cost(i))&gt;=0恒成立\\
所以理论上k可以作为起点，其实我们在以i为起点的前提下，我们遍历到k的油量为\\
(gas[k]-cost[k])+\sum_i^{i+k}(gas(i)-cost(i))&gt;=(gas[k]-cost[k])\\
所以假设我们从k起点可以安全遍历一遍，那么由i起点也一定可以遍历一遍，且剩余的油量更多\\
但如果连起点i都无法遍历一圈，那么起点k就更不可以了；所以就可以直接排除[i,j]的位置；
\]</span> 所以我们就可以在枚举起点时，通过上面的两个<code>舍弃策略</code>，来假设枚举起点的次数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">canCompleteCircuit</span><span class="params">(<span class="keyword">int</span>[] gas, <span class="keyword">int</span>[] cost)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//油量</span></span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; gas.length; i++) &#123;</span><br><span class="line">            <span class="comment">//如果一开始可获得油量就为负，那么一定不是起点(第一个策略)</span></span><br><span class="line">            <span class="keyword">if</span> (gas[i] - cost[i] &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">                <span class="comment">//遍历一圈</span></span><br><span class="line">                <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; gas.length; j++) &#123;</span><br><span class="line">                    sum += (gas[(i + j) % gas.length] - cost[(i + j) % cost.length]);</span><br><span class="line">                    <span class="comment">//中途如果有小于0，就一定不是正确起点</span></span><br><span class="line">                    <span class="keyword">if</span> (sum &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//如果有遍历一圈就是正确起点，如果没有，就直接舍弃[i,i+j]位置;</span></span><br><span class="line">                <span class="keyword">if</span> (j &gt;= gas.length) &#123;</span><br><span class="line">                    <span class="keyword">return</span> i;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    i = i + j;</span><br><span class="line">                    sum = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//没有位置可以作为起点，就无解</span></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="方法二整体思想解题">方法二：整体思想解题</h3>
<p><img src="贪心中等题.assets/image-20211010005543784.png" alt="image-20211010005543784" /><img src="https://i.loli.net/2021/10/10/nDWYIajNuStVoA8.png" alt="image-20211010005649571" /></p>
<p>假设我们由起点的前一个开始，即前一个油量0，可获取油量也为0；然后不然第一个位置就是我们这道题所说的起点，起步入后，我们仅关注其可获取油量（有正有负）。如果我们由-1位置开始，那么步入的结点就是第0个下标位置，其遍历一圈到最后就如上图黑线一样。但如果我们改变起点呢？<code>其折线的形状不会发生改变，因为形状取决于相邻位置可获得油量的差距，所以形状不会变化，但是因为由不同点出发，而出发的那个点油量为0，所以我们的折线图就会沿y轴上下移动，所以我们在有解的前提下，仅仅需要保证最低点为0即可，那么我们所求的起点就是该最低点的下一个点</code>，但是我们如何判断是否有解：我们可获得的油量大于等于消耗的油量；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">canCompleteCircuit</span><span class="params">(<span class="keyword">int</span>[] gas, <span class="keyword">int</span>[] cost)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//最低点以及对应下标</span></span><br><span class="line">        <span class="keyword">int</span> minNum = gas[<span class="number">0</span>] - cost[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> minIndex = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//有0开始遍历，每个位置的剩余油量（有正有负）</span></span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; gas.length; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> temp = (gas[i] - cost[i]);</span><br><span class="line">            sum += temp;</span><br><span class="line">            <span class="comment">//找最低点</span></span><br><span class="line">            <span class="keyword">if</span> (minNum &gt;= sum) &#123;</span><br><span class="line">                minIndex = i;</span><br><span class="line">                minNum = sum;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果sum&lt;0则消耗&gt;获得，则无解</span></span><br><span class="line">        <span class="keyword">if</span> (sum &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//有解时，返回最低点的下一个点，但为了避免minIndex+1越界，所以有取模操作</span></span><br><span class="line">        <span class="keyword">return</span> (minIndex + <span class="number">1</span>) % gas.length;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="最大数">179.最大数</h2>
<p>题目</p>
<p><img src="贪心中等题.assets/image-20211010121155947.png" alt="image-20211010121155947" /><img src="https://i.loli.net/2021/10/10/OZQKgDjXUYhrsap.png" alt="image-20211010121208342" /></p>
<h3 id="方法一按结果排序">方法一：按结果排序</h3>
<p>对于这道题，我们主要的难点就是没有办法将整数拆分开，所以我们的主要难点就是：如何在没有拆分开整数的前提下，决定两个数的前后关系。</p>
<p>想法：</p>
<ul>
<li><p>是否可以像比较字符串那样：高位优先，同数降位；但是我们需要解决数位数不一的问题 <span class="math display">\[
假设x=21;y=213;那么最优排列就是213,21;\\
假设x=21;211;那么最优序列就是21,211;\\
假设x=21;2113;那么最优序列就是21,2113;\\
所以我们会发现如果像字符串那样比较，在长度不一的情况下要决定前后关系就很困难；\\
且我们还需要我们的比较是具有传递性的，但是连两数的规则都难以言明，就明显不是正确的比较方法\\
\]</span></p></li>
<li><p>是否可以按照排列结果排序：就对两个数分别进行排列,而因为这个两个数，所以排列的结果只有两个，所以比较这个结果来决定前后次序</p>
<p>对于这个我们就不需要证明两者的比较结果，因为我们就是根据结果进行排序的，而我们需要在进行证明的就是：完备性（即容易两个数都可以进行该比较，且决定唯一顺序）；传递性（即a&lt;=b,b&lt;=c--&gt;a&lt;=c）;这两个是数组可以进行排列的基础； <span class="math display">\[
\large\boldsymbol{证明:传递性a&lt;=b,b&lt;=c;}\\
设s(x)为大于x的最小的10的幂(注意:必须大于,且s(0)=10)
所以a和b排列的结果为\\
a,b=
\begin{cases}
a*s(b)+b &amp; \text{a优先b}\\
b*s(a)+a &amp; \text{b优先a}
\end{cases}\\
因为我们是根据结果排序的，所以:\\
a&lt;=b\implies a*s(b)+b&lt;=b*s(a)+a\implies a*(s(b)-1)&lt;=b*(s(a)-1); \large\boldsymbol{等式1}\\
b&lt;=c\implies b*s(c)+c&lt;=c*s(b)+b\implies b*(s(c)-1)&lt;=c*(s(b)-1);\large\boldsymbol{等式2}\\
两个式子相乘:\\
\boldsymbol{a*b&lt;=b*c\implies a*b*(s(b)-1)*(s(c)-1)&lt;=b*c*(s(a)-1)*(s(b)-1);}\large\boldsymbol{等式3}\\
其中两边有相同项：b和(s(b)-1);而由s(x)&gt;=10,所以(s(x)-1)&gt;=9恒成立\\
对于b其不为负，所以需要分类讨论\\
b=
\begin{cases}
由等式1得a&lt;=0即a=0且由等式2得c&gt;=0所以a&lt;=c
&amp;\text{if b=0,a&lt;=b,b&lt;=c;}\\\\\\
由等式3得a*(s(c)-1)&lt;=c*(s(a)-1)\implies \\a*s(c)+c&lt;=c*s(a)+a\implies{a&lt;=c}
&amp;\text{if b}\ne\text{0,a&lt;=b,b&lt;=c;}\\
\end{cases}
\\\\
证得:\large\boldsymbol{传递性a&lt;=b,b&lt;=c;}\\
\]</span></p></li>
<li><p>由上面可以知道该比较符合完备性和传递性，所以可以唯一确定排序结果</p></li>
<li><p>接着进行该排序后连接起来得字符串是否就是最优字符串？</p>
<p>假设排序后序列不是最优序列，那么就一定存在两个数，其交换后会使得序列变大；但是因为我们是按结果排序得，所以这个情况和<code>已经排列好</code>这个前提矛盾；所以排列后就为最优序列</p></li>
</ul>
<p>容易理解的代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">largestNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//先将nums转换为字符串数组</span></span><br><span class="line">        String[]Nums=<span class="keyword">new</span> String[nums.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            Nums[i]=<span class="string">&quot;&quot;</span>+nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//通过比较器定义得比较方法进行比较</span></span><br><span class="line">        <span class="comment">//比较器为：形象的进行结果比较</span></span><br><span class="line">        Arrays.sort(Nums,(n1,n2)-&gt;&#123;</span><br><span class="line">            String x=n1+n2,y=n2+n1;</span><br><span class="line">            <span class="keyword">return</span> -x.compareTo(y);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//如果判断成立，那么就证明：数组全为0，那么就仅仅只能返回一个0</span></span><br><span class="line">        <span class="keyword">if</span>(Nums[<span class="number">0</span>].equals(<span class="string">&quot;0&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;0&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//连接字符串</span></span><br><span class="line">        StringBuilder sb=<span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Nums.length; i++) &#123;</span><br><span class="line">            sb.append(Nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>效率较快的代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">largestNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//对数组进行装箱，以便后面进行比较器的排序</span></span><br><span class="line">        Integer[]Nums=<span class="keyword">new</span> Integer[nums.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            Nums[i]=nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//比较器的思路和题解的证明一样</span></span><br><span class="line">        Arrays.sort(Nums,(n1,n2)-&gt;&#123;</span><br><span class="line">            <span class="keyword">long</span> x=<span class="number">10</span>,y=<span class="number">10</span>;</span><br><span class="line">            <span class="keyword">while</span>(x&lt;=n1)&#123;</span><br><span class="line">                x*=<span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(y&lt;=n2)&#123;</span><br><span class="line">                y*=<span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> (<span class="keyword">int</span>)(-(y*n1+n2-(x*n2+n1)));</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">if</span>(Nums[<span class="number">0</span>]==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;0&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//连接起来</span></span><br><span class="line">        StringBuilder sb=<span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Nums.length; i++) &#123;</span><br><span class="line">            sb.append(Nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="性能pk">性能pk</h3>
<figure>
<img src="贪心中等题.assets/image-20211010131433298.png" alt="image-20211010131433298" /><figcaption aria-hidden="true">image-20211010131433298</figcaption>
</figure>
<h2 id="递增的三元子序列">334.递增的三元子序列</h2>
<p>题目</p>
<p><img src="贪心中等题.assets/image-20211011110212456.png" alt="image-20211011110212456" /><img src="贪心中等题.assets/image-20211011110224791.png" alt="image-20211011110224791" /></p>
<h3 id="方法一1或2或3枚举">方法一：1或2或3枚举</h3>
<h4 id="枚举2">枚举2</h4>
<p>对于这道题最简单的办法就是 暴力枚举；但是这道题的数据量而言<span class="math inline">\(O(n^3)\)</span>的开销旧太大了；但是我们可以由暴力枚举逐步优化；</p>
<p>首先我们分析一下：暴力枚举为什么开销那么大？</p>
<ul>
<li>因为对于暴力枚举而言，其最后面部分的数据被若干次重复枚举；所以其可以有很多不必要的开销。</li>
</ul>
<p>其次我们针对这道题的特殊性：递增序列，既然是递增序列，那么如果我们第一层循环枚举1或是3位置的话，那么就需要维护2和3或1和2；但是要同时枚举这两个变量会比较麻烦，因为其维护的两个位置会相互影响，且会受到后面数据的影响； <span class="math display">\[
比如:small=3,mid=5;此时cur=4,那么我们是否可以直接更新small？\\
如果直接更新mid是否还有用?\\
答：如果我们需要明确的mid和samll值的话，那么这个思路就不合适；\\因为你会发现在不同情况下其能不能直接更新是不确定的；\\当然对于这道题还是可以解的，这个等后面枚举1或3的时候会再次提及；
\]</span> 既然枚举1或3比较困难，那么我们就可以尝试枚举2；对于这个我们会明显感觉比较简单，因为我们仅仅需要维护左边的最小值已经右边的最大值；当然如果这样我们是不可以扫一遍就可以顺便维护最大值和最小值，因为我们在遍历的时候仅仅只能维护一个最值；比如：由左向右遍历就可以维护左边的最小值，但无法维护右边的最大值；</p>
<p>所以为了避免开销的数量级发生变化，那么我们就可以对数组进行预处理，用一个单调栈或是一个数组，记录其每个位置右端的最大值，后面就再扫一次以便可以判断</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">increasingTriplet</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//记录最大值的数组</span></span><br><span class="line">        <span class="keyword">int</span>[]maxNum=<span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</span><br><span class="line">        <span class="comment">//注意我们的最大值数组:maxNum[i]表示：i+1~size内的最大值，但不包括i;</span></span><br><span class="line">        maxNum[nums.length-<span class="number">1</span>]=Integer.MAX_VALUE;</span><br><span class="line">        <span class="comment">//最大值数组预处理；</span></span><br><span class="line">        <span class="keyword">int</span> maxOne=nums[nums.length-<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = nums.length-<span class="number">2</span>; i &gt;=<span class="number">0</span> ; i--) &#123;</span><br><span class="line">            maxNum[i]=maxOne;</span><br><span class="line">            maxOne=Math.max(maxOne,nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//再次遍历(反方向)并维护最小值</span></span><br><span class="line">        <span class="keyword">int</span> minOne=nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]&gt;minOne&amp;&amp;nums[i]&lt;maxNum[i])&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            minOne=Math.min(minOne,nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>但是对于这个明显无法满足其题目空间复杂度O(n)的要求，所以是否还有其他的特点，而且递增序列这个特性是否还有其他的引用？</p>
<h4 id="枚举1或3">枚举1或3</h4>
<p>我们再次回想一下我们刚才再枚举2的举例中提到的两个问题：</p>
<ul>
<li><p>那么我们是否可以直接更新small？</p></li>
<li><p>如果直接更新mid是否还有用?</p>
<p>其实这两个问题如果拆开答的话，就都是否定，但是如果是合并一起答得话，在这道题下就是可以的。</p>
<p>假设我们直接更新了small,那么很明显mid已经不是序列和值均大于small的元素值了；但是这里会隐含一个事实：如果mid有值，那么就证明其前面一定存在一个序列和值比其小的元素，虽然无法得知具体是哪个元素，但是我们可以确定一次存在这个元素；既然这样我们在下面的几种情况下就可以采取相应的确定操作： <span class="math display">\[
\begin{cases}
return &amp;true &amp;\text{cur&gt;mid}\\
mid=cur&amp;&amp;\text{cur&gt;small\&amp;\&amp;cur&lt;=mid}\\
small=cur&amp;&amp; \text{cur&lt;=small}\\
\end{cases}
\]</span></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">increasingTriplet</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.length&lt;<span class="number">3</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//该初始化就可以让前面2个元素的遍历可以和后面元素的遍历统一</span></span><br><span class="line">        <span class="comment">//整体思路和上面诉说一样，这里不做注解</span></span><br><span class="line">        <span class="keyword">int</span> min=Integer.MAX_VALUE,mid=Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]&gt;mid)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[i]&lt;=min)&#123;</span><br><span class="line">                    min=nums[i];</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    mid=nums[i];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>性能pk</p>
<figure>
<img src="贪心中等题.assets/image-20211011113736947.png" alt="image-20211011113736947" /><figcaption aria-hidden="true">image-20211011113736947</figcaption>
</figure></li>
</ul>
<h2 id="无重叠区间">435.无重叠区间</h2>
<p>题目</p>
<p><img src="贪心中等题.assets/image-20211012104313106.png" alt="image-20211012104313106" /><img src="贪心中等题.assets/image-20211012104328014.png" alt="image-20211012104328014" /></p>
<h3 id="方法一贪心局部最优推全局最优">方法一：贪心（局部最优推全局最优）</h3>
<p>对于这道题，我们需要移除区间的最少数量，也等价于寻找不重复区间的最大数量；既然要寻找不重复区间的最大数量，所以我们就需要对数组进行排序，以便来决定其代表区间在所给区间集中的位置；但是有一个难点：<code>我们要如何进行排序?</code></p>
<ul>
<li><p>如何排序？</p>
<ul>
<li><p>仅根据左端排序</p>
<p>因为其仅根据左端排序，那么我们就最大那些区间的左端部分是较大的，而对右端一无所知，仅知道右端比左端大，而因为我们要尽量多的不重复区间，所以我们就可以尽量选择左端较大的，以便有更多的地方给剩下的区间，所以我们就需要由右向左遍历；最右的那个可以直接被选择，因为其左端最大，且右端对结果不影响；然后就可以向前遍历，维护当前所选区间的最左区间的左端点；然后先前遍历寻找右端小于这个端点且左端点尽可能大的区间；就可以得到最大的不重叠区间数。</p></li>
<li><p>仅根据右端排序</p>
<p>其思想和上面一样;不过这种排列是由前向后遍历</p></li>
</ul></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">eraseOverlapIntervals</span><span class="params">(<span class="keyword">int</span>[][] intervals)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(intervals.length==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//根据右端点排序</span></span><br><span class="line">        Arrays.sort(intervals,(n1,n2)-&gt;&#123;</span><br><span class="line">            <span class="keyword">return</span> n1[<span class="number">1</span>]-n2[<span class="number">1</span>];</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//不重叠区间最大数目</span></span><br><span class="line">        <span class="keyword">int</span> result=<span class="number">1</span>;</span><br><span class="line">        <span class="comment">//当前所选区间的最左端点</span></span><br><span class="line">        <span class="keyword">int</span> right=intervals[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; intervals.length; i++) &#123;</span><br><span class="line">            <span class="comment">//遇到合适区间，就可以更新变量</span></span><br><span class="line">            <span class="keyword">if</span>(intervals[i][<span class="number">0</span>]&gt;=right)&#123;</span><br><span class="line">                result+=<span class="number">1</span>;</span><br><span class="line">                right=intervals[i][<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> intervals.length-result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>拓展：</p>
<p>如果我们根据左端点排序，那么我们还能由左向右开始遍历吗？</p>
<ul>
<li></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
        <category>贪心</category>
        <category>中等题</category>
      </categories>
      <tags>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title>贪心专题（一）</title>
    <url>/2021/10/31/%E8%B4%AA%E5%BF%83/%E8%B4%AA%E5%BF%83%E7%AE%80%E5%8D%95%E9%A2%98/</url>
    <content><![CDATA[<p>简单题</p>
<p>初步体验贪心的思想，三道题为后面中等部分打基础</p>
<span id="more"></span>
<h2 id="最长回文串">409.最长回文串</h2>
<p>题目</p>
<figure>
<img src="贪心简单题.assets/image-20211003164832011.png" alt="image-20211003164832011" /><figcaption aria-hidden="true">image-20211003164832011</figcaption>
</figure>
<p>方法一：贪心</p>
<p>对于这道题我们不需要知道其最长的回文串是哪个，且我们是可以随意排列的，所以我们就仅仅需要找到回文串的共性即可，且这个共性是在数量上的共性：其两边的字符必须重复出现，而奇数就仅仅出现在最中间；</p>
<p>因此，如果我们某个字符数目为偶数即可以直接加入结果，但如果为奇数，那么就必须减去，到最后再加上一；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">longestPalindrome</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[]ascii=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="string">&#x27;z&#x27;</span>+<span class="number">1</span>];<span class="comment">//数组模拟哈希表</span></span><br><span class="line">        <span class="keyword">int</span> res=<span class="number">0</span>;<span class="comment">//结果变量</span></span><br><span class="line">        <span class="keyword">boolean</span>  isMid=<span class="keyword">false</span>;<span class="comment">//是否有奇数个数的字符</span></span><br><span class="line">        <span class="comment">//数据预处理</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            ascii[s.charAt(i)]+=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//变量数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;ascii.length ; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(ascii[i]%<span class="number">2</span>!=<span class="number">0</span>)&#123;</span><br><span class="line">                isMid=<span class="keyword">true</span>;</span><br><span class="line">                res+=ascii[i]-<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                res+=ascii[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(isMid)&#123;</span><br><span class="line">            res+=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//改进版</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">longestPalindrome</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">int</span>[] cnt = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">58</span>];</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">char</span> c : s.toCharArray()) &#123;</span><br><span class="line">         cnt[c - <span class="string">&#x27;A&#x27;</span>] += <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> x: cnt) &#123;</span><br><span class="line">        <span class="comment">// 字符出现的次数最多用偶数次。</span></span><br><span class="line">        ans += x - (x &amp; <span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 如果最终的长度小于原字符串的长度，说明里面某个字符出现了奇数次，那么那个字符可以放在回文串的中间，所以额外再加一。</span></span><br><span class="line">      <span class="keyword">return</span> ans &lt; s.length() ? ans + <span class="number">1</span> : ans;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="分发饼干">455.分发饼干</h2>
<p>题目</p>
<p><img src="贪心简单题.assets/image-20211003171626512.png" alt="image-20211003171626512" /><img src="贪心简单题.assets/image-20211003171646660.png" alt="image-20211003171646660" /></p>
<p>方法一：贪心思想+排序+双指针</p>
<p>对于这道题，我们需要找到一种分发饼干的策略，然可以得到满足的孩子越多；</p>
<ul>
<li><p>小胃口优先策略</p>
<p>即：先让小胃口的孩子挑选饼干，且其挑选的饼干是大于其胃口的最小饼干；因为这样的饼干可以满足小胃口的孩子，但不一定能满足大胃口的；即使可以，那么其数目也不会发生变化，因为 一个饼干仅仅能满足一个孩子；但如果没有饼干符合小胃口的，那么后面的大胃口就更不能满足了；</p></li>
<li><p>大饼干优先策略</p>
<p>即：优先将大饼干发送给小于其的最大胃口的孩子；如果某饼干能满足小胃口但却不一定能满足大胃口，所以我们就将大的饼干优先给大胃口的，让小胃口的人数尽可能多；以便使得小的饼干也可以满足孩子</p></li>
</ul>
<p>小胃口策略</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findContentChildren</span><span class="params">(<span class="keyword">int</span>[] g, <span class="keyword">int</span>[] s)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//排序，以便确定哪些为大胃口，哪些为小的</span></span><br><span class="line">        Arrays.sort(g);</span><br><span class="line">        Arrays.sort(s);</span><br><span class="line">        <span class="keyword">int</span> gPtr=<span class="number">0</span>;<span class="comment">//胃口指针</span></span><br><span class="line">        <span class="keyword">int</span> sPtr=<span class="number">0</span>;<span class="comment">//饼干指针</span></span><br><span class="line">        <span class="keyword">int</span> res=<span class="number">0</span>;<span class="comment">//结果变量</span></span><br><span class="line">        <span class="keyword">while</span>(gPtr&lt;g.length&amp;&amp;sPtr&lt;s.length)&#123;</span><br><span class="line">            <span class="comment">//如果可以满足，就....</span></span><br><span class="line">            <span class="keyword">if</span>(g[gPtr]&lt;=s[sPtr])&#123;</span><br><span class="line">                res+=<span class="number">1</span>;</span><br><span class="line">                gPtr+=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//饼干要么被分发，要么不能被分发；不然被分发的饼干虽然可以分发给前面小胃口的孩子，但那些孩子一定已经有了饼干，不然这个饼干就不会出现在这里</span></span><br><span class="line">            sPtr+=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="数组拆分">561.数组拆分|</h2>
<p>题目</p>
<p><img src="贪心简单题.assets/image-20211003173558392.png" alt="image-20211003173558392" /><img src="贪心简单题.assets/image-20211003173610391.png" alt="image-20211003173610391" /></p>
<p>方法一：贪心</p>
<p>因为我们是想被拆分的数组的最小值的和最大，那么就要保证数组的大值到最后能够被得到；所以我们就可以贪心的然两个相聚最小的两个数分为一组，以便让大数可以得到保留;但如果想下面那样让大数去和很小的数组一起，那么另一个大数也会被分到和一个小数在一起，所以我们就要将两个相邻的数分在一起</p>
<p>比如：[1,2,3,4,5,6]--&gt;(5,6)--&gt;(4,6),(3,5)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">arrayPairSum</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//排序以便，确定那些数比较接近和大小情况</span></span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="keyword">int</span> result=<span class="number">0</span>;</span><br><span class="line">        <span class="comment">//每相邻两个为一组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = nums.length-<span class="number">1</span>; i &gt;=nums.length/<span class="number">2</span> ; i++) &#123;</span><br><span class="line">            result+=nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
        <category>贪心</category>
        <category>简单题</category>
      </categories>
      <tags>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title>线段树专题--基础部分</title>
    <url>/2021/11/01/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%92%8C%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<p><strong>线段树是一种用来维护区间信息以及对数时间内处理区间信息的数据结构，其主要支持区间修改，区间查询，单点查询，单点修改的操作</strong></p>
<span id="more"></span>
<h2 id="线段树的结构以及理论">线段树的结构以及理论</h2>
<p><strong>线段树的基本结构是一颗完全二叉树，通过分治来管理区间信息,其叶子节点存储的是要管理区间的元素</strong></p>
<p>首先我们先定义一下要维护的数据信息：</p>
<ul>
<li>设要维护的元素为有序集合<span class="math inline">\(\{val_i\}(0&lt;=i&lt;=SIZE)\)</span>，i也代表元素的顺序</li>
<li>区间处理分两部分<span class="math inline">\(在区间(rig,lef)操作\)</span>
<ul>
<li>在该有序集合中我们需要支持区间查询的运算为<span class="math inline">\(\bigodot(lef,rig)\)</span></li>
<li>支持的区间修改操作为<span class="math inline">\(\bigoplus(lef,rig,{k})\)</span>,k为修改时需要用到的信息<code>(注意k不一定为一个数,也可以为一个向量,下面我们会有所提及)</code></li>
</ul></li>
<li>单点操作即是上面区间操作的特殊情况即<span class="math inline">\(lef==rig\)</span>,所以这里就不重复定义了</li>
</ul>
<p>有了上面需要维护的目标信息后,就可以定义相应线段树数据结构了,既然线段树是一颗完全二叉树,那么我们首先需要定义树节点</p>
<ul>
<li><p>树节点</p>
<ul>
<li>val:用于储存其对应管理的区间信息</li>
<li>lazyTag:懒惰修改标记,到后面的懒惰修改部分会重点结束</li>
</ul></li>
<li><p>存储形式有两种选择</p>
<ul>
<li>堆式存储--前提是存储的树为完全二叉树</li>
<li>建真正意义上的节点树--一般的树均可</li>
</ul>
<p><strong>但是既然线段树本身就是一颗完全二叉树,所以采用堆式存储是较好的,一方面便于维护,一方面便于建立和释放空间</strong></p>
<ul>
<li>堆式存储(为了避免读者不了解堆而导致阅读无法继续,下面会简约介绍堆的结构)
<ul>
<li>堆的本质是用一个数组来装要维护的数组,且要维护的元素是本身需要本作为完全二叉树存储的</li>
<li>完全二叉树就是可以按顺序编号的二叉树(具体可以查阅:https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91)</li>
<li>其中完全二叉树的一个很重要的特性就是可以通过其父节点的编号,来计算得到其子结点的编号
<ul>
<li>即父节点p--左节点为2<em>p,且右节点为2</em>p+1</li>
<li>编号即可以作为其在数组中的下标,注意其编号最好由1开始,即1为根结点编号,否则2*0==0,就无法统一操作</li>
</ul></li>
<li>所以在一个数组中以其树的结点编号为下标存储,就可以逻辑上的存储一棵完全二叉树,而要遍历时也需要按照下标的关系去遍历</li>
</ul></li>
</ul></li>
<li><p>线段树父节点和子节点的关系</p>
<ul>
<li>存储上参考上面<code>堆式存储</code></li>
<li>逻辑上:父节点是子节点<span class="math inline">\(\bigodot(左,右)\)</span>的结构(注意:因为整个定义,所以我们要求<span class="math inline">\(\bigodot运算必须符号结合律\)</span>;</li>
<li>父节点是管理子节点的信息,而子节点也可能是另外一个子树的根节点,所以就通过分治一层一层的关系下方的节点信息,直到叶子节点,所以既然是分治关系,所以运算顺序可能会改变,所以运算必须符号结合律</li>
<li>而为什么父节点处理子节点的信息是通过<span class="math inline">\(\bigodot\)</span>运算呢?
<ul>
<li>答案很显然,我们的目标就是要维护最下层元素的<span class="math inline">\(\bigodot\)</span>运算结果,而如果需要选定区间,那么分治的优势也出来了,即分治是将原始元素区间分为很多部分,而每个结点会对应的关系一段区间的信息,而我们仅仅需要找可以管理我们要求区间的若干结点即可(因为是二分管理,所以有些区间是好几个结点管理的区间的并集)</li>
</ul></li>
</ul></li>
<li><p>浅谈修改</p>
<ul>
<li>上面父子结点关系阐述了区间查询的原理,而区间修改操作即会比较麻烦,因为我们如果修改了其中一个元素,那么我们就从该叶子节点往上到根节点一整条路的元素都需要更改,开销极大,也导致线段树失去了它原有的优势了,所以一般的实现都是采用一种叫做'懒惰修改'的策略,以及减低开销</li>
</ul></li>
<li><p>懒惰策略</p>
<ul>
<li>即将修改和查询结合,一开始我们要进行区间修改,那么我们就需要找到那几个管理对应区间的节点的值,先修改他们的值即node.val<span class="math inline">\(\bigoplus\)</span>(<span class="math inline">\(\bigoplus(k)*(ed-st+1)\)</span>),即[st,ed]为node管理的区间,等修好好,就在当前节点设置一个lazyTag=k,其k就是向下传递的信息,该标准不会堆该节点其作用,但会和下面的节点起作用,同样也会对子节点的值以及lazyTag其作用,因为子节点的lazyTag是对其子子节点的,所以如果下面的子节点右lazyTag值不是<span class="math inline">\(\bigoplus运算幺元\)</span>,就证明其子子节点还没有修改没有完成,所以新加的修改需要和旧的修改相叠加,这种将标志向下传递的,和下面的标志相结合的操作,我们叫做pushdown;</li>
</ul></li>
<li><p>好了,我们这里再来重新提一下他们各自的要求点:</p>
<ul>
<li>要维护的区间查询运算必须符合结合律</li>
<li>标志的修改行为定义:pushdown以及递归的终止条件</li>
<li>需要对标志和子节点值结合定义行为</li>
<li>需要对标志定义单位元,一般在无效修改时,有合理的值存在</li>
</ul></li>
</ul>
<p>讲了这么久,还没看见代码,确实不是代码人的风格,现在久可以看看下面的两道模板题,加深理解</p>
<h2 id="模板题">模板题</h2>
<h3 id="p3372-模板线段树-1">P3372 【模板】线段树 1</h3>
<p>题目</p>
<p><img src="https://i.loli.net/2021/11/01/q7BkpsQgO5SL6WN.png" /><img src="https://i.loli.net/2021/11/01/RlXzyEJ5YhIS1Hk.png" alt="image-20211101152802561" /><img src="https://i.loli.net/2021/11/01/X4UdTHQh75IyNtA.png" alt="image-20211101152928059" /></p>
<p>思路分析:</p>
<p>因为是模板题,所以就直接上代码,</p>
<p><strong>注意:该题的数据范围,需要防止溢出</strong></p>
<p>代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span><span class="comment">//头文件不需要这么多,不够为了方便就全部都写上去了,也可用万能头文件</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n = <span class="number">0</span>,m = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//int sum = 0;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//线段树很重要的一点就是需要给每个结点编号：且规定编号的结点管辖原数组的那些位置</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//建树</span></span><br><span class="line"><span class="comment">//注意：线段树的叶子结点的个数就是原数组的位数</span></span><br><span class="line"><span class="comment">//所以线段树大于原数组</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(vector&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt;&amp; nums, vector&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt;&amp; tree, <span class="keyword">int</span> lef, <span class="keyword">int</span> rig,<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (lef == rig) &#123;</span><br><span class="line">		tree[p] = nums[lef];</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//分治建树</span></span><br><span class="line">	<span class="keyword">int</span> mid = lef + ((rig - lef) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">	<span class="comment">//注意：我们默认规定中间结点mid归于左边</span></span><br><span class="line">	<span class="built_in">build</span>(nums, tree, lef, mid,<span class="number">2</span>*p);</span><br><span class="line">	<span class="built_in">build</span>(nums, tree, mid + <span class="number">1</span>, rig,<span class="number">2</span>*p+<span class="number">1</span>);</span><br><span class="line">	<span class="comment">//只有等下面的树建好，我们才能对建好的树的父子结点进行处理；</span></span><br><span class="line">	tree[p] = tree[<span class="number">2</span> * p] + tree[<span class="number">2</span> * p + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//更新：其需要需要的范围以及当前编号结点的管辖范围</span></span><br><span class="line"><span class="comment">//t为懒惰标志数组,tree为线段树,[lef,rig]为需要更新的区间,[st,ed]为编号p节点的管理区间的范围</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(vector&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt;&amp; t, vector&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt;&amp; tree, <span class="keyword">int</span> lef, <span class="keyword">int</span> rig, <span class="keyword">int</span> val,<span class="keyword">int</span> st,<span class="keyword">int</span> ed,<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">	<span class="comment">//更新和建树不同，建树的终止条件是只有一个位置的时候，而更新的话，</span></span><br><span class="line">	<span class="comment">//如果当前编号结点管辖的元素均处于需要更新的范围，那么就以该结点为根结点的整个子树均需要更新</span></span><br><span class="line">	<span class="keyword">if</span> (lef &lt;= st &amp;&amp; ed &lt;= rig) &#123;</span><br><span class="line">		tree[p] += (ed - st + <span class="number">1</span>) * val;</span><br><span class="line">		t[p] += val;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> mid = st + ((ed - st) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">	<span class="comment">//延迟更新,即pushdown操作,lazyTag仅对子节点的值以及懒惰标志其作用</span></span><br><span class="line">	<span class="keyword">if</span> (t[p] &amp;&amp; st &lt; ed) &#123;</span><br><span class="line">        <span class="comment">//对值</span></span><br><span class="line">		tree[<span class="number">2</span> * p] += (mid - st + <span class="number">1</span>) * t[p];</span><br><span class="line">		tree[<span class="number">2</span> * p + <span class="number">1</span>] += (ed - mid) * t[p];</span><br><span class="line">        <span class="comment">//对标志</span></span><br><span class="line">		t[p * <span class="number">2</span>] += t[p];</span><br><span class="line">		t[p * <span class="number">2</span> + <span class="number">1</span>] += t[p];</span><br><span class="line">        <span class="comment">//将标志恢复为单位元,因为该标志已经发挥作用了</span></span><br><span class="line">		t[p] = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//分治，注意我们默认将mid结点归为左边的</span></span><br><span class="line">	<span class="keyword">if</span> (lef&lt;= mid) <span class="built_in">update</span>(t, tree, lef, rig,val, st, mid,p*<span class="number">2</span>);</span><br><span class="line">	<span class="keyword">if</span> (rig &gt;mid)	<span class="built_in">update</span>(t, tree, lef, rig, val, mid + <span class="number">1</span>, ed,p*<span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">    <span class="comment">//整个位子节点合并位父节点,有查询运算决定</span></span><br><span class="line">	tree[p] = tree[<span class="number">2</span> * p] + tree[<span class="number">2</span> * p + <span class="number">1</span>];</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//求和，和跟新的思路类似</span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">getSum</span><span class="params">(vector&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt;&amp; t, vector&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt;&amp; tree, <span class="keyword">int</span> lef, <span class="keyword">int</span> rig, <span class="keyword">int</span> st, <span class="keyword">int</span> ed, <span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (lef &lt;= st &amp;&amp; ed &lt;= rig) &#123;</span><br><span class="line">		<span class="keyword">return</span> tree[p];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> mid = st + ((ed - st) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    <span class="comment">//pushdown运算,其在更新和查询节点都要出现,且其不可作用与叶子节点</span></span><br><span class="line">	<span class="keyword">if</span> (t[p]&amp;&amp;st&lt;ed) &#123;</span><br><span class="line">		tree[<span class="number">2</span> * p] += (mid - st+<span class="number">1</span>) * t[p];</span><br><span class="line">		tree[<span class="number">2</span> * p + <span class="number">1</span>] += (ed - mid) * t[p];</span><br><span class="line">		t[p * <span class="number">2</span>] += t[p];</span><br><span class="line">		t[p * <span class="number">2</span> + <span class="number">1</span>] += t[p];</span><br><span class="line">		t[p] = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="comment">//下面的+是由其求和查询运算决定的</span></span><br><span class="line">	<span class="keyword">long</span> <span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span> (lef &lt;= mid)	sum = <span class="built_in">getSum</span>(t, tree, lef, rig, st, mid, p * <span class="number">2</span>);</span><br><span class="line">	<span class="keyword">if</span> (mid &lt; rig)	sum += <span class="built_in">getSum</span>(t, tree, lef, rig, mid + <span class="number">1</span>, ed, p * <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">	vector&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt;<span class="built_in">nums</span>(n, <span class="number">0</span>);<span class="comment">//原数组</span></span><br><span class="line">	vector&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt;<span class="built_in">treeNums</span>(<span class="number">4</span> * n, <span class="number">0</span>);<span class="comment">//线段树</span></span><br><span class="line">	vector&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt;<span class="built_in">t</span>(<span class="number">4</span> * n, <span class="number">0</span>);<span class="comment">//延迟更新的记录</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; nums.<span class="built_in">size</span>();i += <span class="number">1</span>)	cin &gt;&gt; nums[i];</span><br><span class="line">    <span class="comment">//建树</span></span><br><span class="line">	<span class="built_in">build</span>(nums, treeNums, <span class="number">0</span>, nums.<span class="built_in">size</span>() - <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">long</span> <span class="keyword">long</span> ind = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">long</span> <span class="keyword">long</span> lef = <span class="number">0</span>, rig = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">long</span> <span class="keyword">long</span> val = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; m;i += <span class="number">1</span>) &#123;</span><br><span class="line">		<span class="keyword">if</span> (cin &gt;&gt; ind &amp;&amp; ind == <span class="number">1</span>) &#123;</span><br><span class="line">			cin &gt;&gt; lef &gt;&gt; rig &gt;&gt; val;</span><br><span class="line">			<span class="built_in">update</span>(t, treeNums, lef<span class="number">-1</span>, rig<span class="number">-1</span>, val, <span class="number">0</span>, nums.<span class="built_in">size</span>()<span class="number">-1</span>, <span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			cin &gt;&gt; lef &gt;&gt; rig;</span><br><span class="line">			cout &lt;&lt; <span class="built_in">getSum</span>(t, treeNums, lef - <span class="number">1</span>, rig - <span class="number">1</span>, <span class="number">0</span>, nums.<span class="built_in">size</span>()<span class="number">-1</span>, <span class="number">1</span>) &lt;&lt; endl;;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的该模板题没有什么好说的了,因为参考注释,就可轻易看懂</p>
<h3 id="p3373-模板线段树-2">P3373 【模板】线段树 2</h3>
<p>题目</p>
<p><img src="https://i.loli.net/2021/11/01/rtwhP6UIdqL9kSg.png" alt="image-20211101154049730" /><img src="https://i.loli.net/2021/11/01/K7y5RIj18m3eBWg.png" alt="image-20211101154104151" /><img src="线段树基础.assets/image-20211101154116576.png" alt="image-20211101154116576" /></p>
<p>思路分析:</p>
<p>对于这道题,和前面第一道题不一样的就是,它不仅仅只有一个修改运算,而是由两个,当然以后也可能会遇到更多中的,</p>
<p>因为这道题比较容易让人模糊,我们就重申一下前面我们的提到的要注意的点:</p>
<ul>
<li>要维护的区间查询运算必须符合结合律--求和运算符合</li>
<li>标志的修改行为定义:即标志结合--?</li>
<li>需要对标志和子节点值结合定义行为--?</li>
<li>需要对标志定义单位元,一般在无效修改时,有合理的值存在--乘法为1,加法为1</li>
</ul>
<p>你会发现对于上面的4点,第2和3点难以去定义,因为现在不像前面那样只有一个懒惰标志lazyTag,所以我们在进行设计pushdown以及递归终止条件时一时间可能不太会进行定义</p>
<p><strong>首先要注意的就是:标志修改行为的定义和标志和子节点值结合两者不是独立的，而是一个一旦确定，另一个也随着确定</strong></p>
<p>设当前节点为p,值为val(v),即mulTag(mt),addTag(at)分别为乘法,加法标志:</p>
<p>现在我们<code>标志和子子节点的结合</code>有两种方案：</p>
<ul>
<li>先加后乘:<span class="math inline">\((v+at)*mt=v*mt+at*mt\)</span></li>
<li>先乘后加:<span class="math inline">\(v*mt+at\)</span></li>
</ul>
<p>现在我们分析一下:</p>
<p>在pushdown的情况下，一般是标志和标志的结合：另子节点的旧标志为<span class="math inline">\(\{mt_1,dt_1\}\)</span>,新标志<span class="math inline">\(\{mt_2,at_2\}\)</span></p>
<ul>
<li><p>对于子节点的实质影响：</p>
<ul>
<li><p>旧标志：<span class="math inline">\((v+at)*mt\)</span></p></li>
<li><p>先加后乘：那么</p>
<ul>
<li><p><span class="math display">\[
((v+at_1)*mt_1)+a_2)*mt_2=v*mt_1*mt_2+at_1*mt_1*mt_2+at_2*mt_2=v*mt_1*mt_2+(at_1*mt_1+at_2)*mt_2
\]</span></p></li>
<li><p><span class="math display">\[
化为先加后乘的形式：v*mt_1*mt_2+(at_1*mt_1+at_2)*mt_2=(v+\frac{(at_1*mt_1+at_2)*mt_2}{mt_1*mt_2})
\]</span></p></li>
<li><p>显然有上式子就知道如果采取这种方案，那么at的维护需要用到除法，除法开销大，且损失也大，所以除法没有方案了，否则这种方案就不可；</p></li>
</ul></li>
<li><p>先乘后加：</p>
<ul>
<li><p><span class="math display">\[
(((v*mt_1)+at_1)*mt_2)+at_2=v*mt_1*mt_2+(at_1*mt_1+at_2)
\]</span></p></li>
<li><p>其上面去括号也还是先乘后加的形式，且没有除法，都是一些正常开销，以及没有损失的运算，所以对于在pushdown下，先乘后加，显然更好</p></li>
</ul></li>
</ul></li>
</ul>
<p>在递归终止条件中：</p>
<ul>
<li>即<span class="math inline">\((v+at)*mt+\bigtriangleup at\)</span>与<span class="math inline">\((v*mt)+at+\bigtriangleup at\)</span>的化简对比</li>
<li><span class="math inline">\((v+at)*mt*\bigtriangleup mt\)</span>与<span class="math inline">\(((v*mt)+at)*\bigtriangleup mt\)</span>的对比</li>
<li>上面分别化为先加后乘（前）以及先乘后加（后）的形式，会发现两种都可。</li>
</ul>
<p>综上就可以得到：方案为先乘后加</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//在写线段树之前，需要先考虑一下考虑线段树能用来做什么，可以做什么</span></span><br><span class="line"><span class="comment">//先乘后加；定义个</span></span><br><span class="line"><span class="keyword">int</span> n = <span class="number">0</span>, m = <span class="number">0</span>, t_p = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">node</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">long</span> <span class="keyword">long</span> val;<span class="comment">//值</span></span><br><span class="line">	<span class="keyword">long</span> <span class="keyword">long</span> addTag;<span class="comment">//add的lazyTag</span></span><br><span class="line">	<span class="keyword">long</span> <span class="keyword">long</span> mulTag;<span class="comment">//mul的lazyTag</span></span><br><span class="line">	<span class="built_in">node</span>(<span class="keyword">int</span> v1, <span class="keyword">int</span> a1, <span class="keyword">int</span> m1) &#123;</span><br><span class="line">		val = v1;</span><br><span class="line">		addTag = a1;</span><br><span class="line">		mulTag = m1;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdowm</span><span class="params">(vector&lt;node&gt;&amp; segtree, <span class="keyword">int</span> st, <span class="keyword">int</span> ed, <span class="keyword">int</span> p)</span></span>;</span><br><span class="line"><span class="comment">//取模的add和mul</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> n1, <span class="keyword">long</span> <span class="keyword">long</span> n2)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (n1 * n2) % t_p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> n1, <span class="keyword">long</span> <span class="keyword">long</span> n2)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (n1 + n2) % t_p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//建树</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(vector&lt;node&gt;&amp;segtree, vector&lt;<span class="keyword">int</span>&gt;&amp;nums,<span class="keyword">int</span> lef,<span class="keyword">int</span> rig,<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (lef&gt;=rig) &#123;</span><br><span class="line">		segtree[p].val = nums[lef];</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> mid = lef + ((rig - lef) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">	<span class="built_in">build</span>(segtree, nums, lef, mid,<span class="number">2</span>*p);</span><br><span class="line">	<span class="built_in">build</span>(segtree, nums, mid + <span class="number">1</span>, rig,<span class="number">2</span>*p+<span class="number">1</span>);</span><br><span class="line">	segtree[p].val =<span class="built_in">add</span>( segtree[<span class="number">2</span> * p].val, segtree[<span class="number">2</span> * p + <span class="number">1</span>].val);</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mul</span><span class="params">(vector&lt;node&gt;&amp; segtree, <span class="keyword">int</span> lef, <span class="keyword">int</span> rig, <span class="keyword">int</span> val, <span class="keyword">int</span> st, <span class="keyword">int</span> ed, <span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//递归终止条件，逻辑就是上面推导的公式</span></span><br><span class="line">	<span class="keyword">if</span> (lef &lt;= st &amp;&amp; ed &lt;= rig) &#123;</span><br><span class="line">		segtree[p].val =<span class="built_in">mul</span>(segtree[p].val,val);</span><br><span class="line">		segtree[p].mulTag = <span class="built_in">mul</span>(segtree[p].mulTag,val);</span><br><span class="line">		segtree[p].addTag =<span class="built_in">mul</span>(segtree[p].addTag, val);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (st &lt; ed) &#123;</span><br><span class="line">		<span class="built_in">pushdowm</span>(segtree, st, ed, p);</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="comment">//分治</span></span><br><span class="line">	<span class="keyword">int</span> mid = st + ((ed - st) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">if</span> (lef &lt;= mid)	<span class="built_in">mul</span>(segtree, lef, rig, val, st, mid, p * <span class="number">2</span>);</span><br><span class="line">	<span class="keyword">if</span> (mid &lt; rig)<span class="built_in">mul</span>(segtree, lef, rig, val, mid + <span class="number">1</span>, ed, p * <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">	segtree[p].val = <span class="built_in">add</span>(segtree[<span class="number">2</span> * p].val , segtree[<span class="number">2</span> * p + <span class="number">1</span>].val);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(vector&lt;node&gt;&amp; segtree, <span class="keyword">int</span> lef, <span class="keyword">int</span> rig, <span class="keyword">int</span> val, <span class="keyword">int</span> st, <span class="keyword">int</span> ed, <span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (lef &lt;= st &amp;&amp; ed &lt;= rig) &#123;</span><br><span class="line">		segtree[p].val = <span class="built_in">add</span>(segtree[p].val , val*(ed-st+<span class="number">1</span>));</span><br><span class="line">		segtree[p].addTag = <span class="built_in">add</span>(segtree[p].addTag, val);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (st &lt; ed) &#123;</span><br><span class="line">		<span class="built_in">pushdowm</span>(segtree, st, ed, p);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> mid = st + ((ed - st) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">if</span> (lef &lt;= mid)	<span class="built_in">add</span>(segtree, lef, rig, val, st, mid, p * <span class="number">2</span>);</span><br><span class="line">	<span class="keyword">if</span> (mid &lt; rig)<span class="built_in">add</span>(segtree, lef, rig, val, mid + <span class="number">1</span>, ed, p * <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">	segtree[p].val =<span class="built_in">add</span>( segtree[<span class="number">2</span> * p].val , segtree[<span class="number">2</span> * p + <span class="number">1</span>].val);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdowm</span><span class="params">(vector&lt;node&gt;&amp; segtree, <span class="keyword">int</span> st, <span class="keyword">int</span> ed, <span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (st &gt;= ed) &#123;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> mid = st + ((ed - st) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">	<span class="comment">//标志和标志的结合，父节点标志和子节点的结合</span></span><br><span class="line">	segtree[<span class="number">2</span> * p].val = <span class="built_in">add</span>(<span class="built_in">mul</span>(segtree[<span class="number">2</span> * p].val, segtree[p].mulTag), segtree[p].addTag*(mid-st+<span class="number">1</span>));</span><br><span class="line">	segtree[<span class="number">2</span> * p].mulTag = <span class="built_in">mul</span>(segtree[<span class="number">2</span> * p].mulTag, segtree[p].mulTag);</span><br><span class="line">	segtree[<span class="number">2</span> * p].addTag = <span class="built_in">add</span>(<span class="built_in">mul</span>(segtree[<span class="number">2</span> * p].addTag, segtree[p].mulTag), segtree[p].addTag);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	segtree[<span class="number">2</span> * p+<span class="number">1</span>].val = <span class="built_in">add</span>(<span class="built_in">mul</span>(segtree[<span class="number">2</span> * p+<span class="number">1</span>].val, segtree[p].mulTag), segtree[p].addTag*(ed-mid));</span><br><span class="line">	segtree[<span class="number">2</span> * p+<span class="number">1</span>].mulTag = <span class="built_in">mul</span>(segtree[<span class="number">2</span> * p+<span class="number">1</span>].mulTag, segtree[p].mulTag);</span><br><span class="line">	segtree[<span class="number">2</span> * p+<span class="number">1</span>].addTag = <span class="built_in">add</span>(<span class="built_in">mul</span>(segtree[<span class="number">2</span> * p+<span class="number">1</span>].addTag, segtree[p].mulTag), segtree[p].addTag);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">//单位元的定义</span></span><br><span class="line">	segtree[p].addTag = <span class="number">0</span>;</span><br><span class="line">	segtree[p].mulTag = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//求和</span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">getSum</span><span class="params">(vector&lt;node&gt;&amp; segtree, <span class="keyword">int</span> lef, <span class="keyword">int</span> rig,<span class="keyword">int</span> st, <span class="keyword">int</span> ed, <span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (lef &lt;= st &amp;&amp; ed &lt;= rig) &#123;</span><br><span class="line">		<span class="keyword">return</span> segtree[p].val;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//如果不是子节点，就pushdown</span></span><br><span class="line">	<span class="keyword">if</span> (st &lt; ed) &#123;</span><br><span class="line">		<span class="built_in">pushdowm</span>(segtree, st, ed, p);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> mid = st + ((ed - st) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">long</span> <span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span> (lef &lt;= mid) sum = <span class="built_in">getSum</span>(segtree, lef, rig, st, mid, p * <span class="number">2</span>);</span><br><span class="line">	<span class="keyword">if</span> (mid &lt; rig)sum =<span class="built_in">add</span>(sum, <span class="built_in">getSum</span>(segtree, lef, rig, mid + <span class="number">1</span>, ed, p * <span class="number">2</span> + <span class="number">1</span>));</span><br><span class="line">	<span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	cin &gt;&gt; n &gt;&gt; m &gt;&gt; t_p;</span><br><span class="line">	vector&lt;<span class="keyword">int</span>&gt;<span class="built_in">nums</span>(n, <span class="number">0</span>);</span><br><span class="line">	vector&lt;node&gt;<span class="built_in">segtree</span>(<span class="number">4</span>*n, <span class="built_in">node</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>));</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;i += <span class="number">1</span>)	cin &gt;&gt; nums[i];</span><br><span class="line">	<span class="built_in">build</span>(segtree, nums, <span class="number">0</span>, n<span class="number">-1</span>, <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">int</span> x = <span class="number">0</span>, y = <span class="number">0</span>, k = <span class="number">0</span>,ind=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; m;i += <span class="number">1</span>) &#123;</span><br><span class="line">		cin &gt;&gt; ind;</span><br><span class="line">		<span class="comment">//mul</span></span><br><span class="line">		cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">		<span class="keyword">if</span> (ind == <span class="number">1</span>) &#123;</span><br><span class="line">			cin &gt;&gt; k;</span><br><span class="line">			<span class="built_in">mul</span>(segtree, x<span class="number">-1</span>, y<span class="number">-1</span>, k, <span class="number">0</span>, nums.<span class="built_in">size</span>()<span class="number">-1</span>,<span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//add</span></span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (ind == <span class="number">2</span>) &#123;</span><br><span class="line">			cin &gt;&gt; k;</span><br><span class="line">			<span class="built_in">add</span>(segtree, x - <span class="number">1</span>, y - <span class="number">1</span>, k, <span class="number">0</span>, nums.<span class="built_in">size</span>()<span class="number">-1</span>, <span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//getSum</span></span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			cout &lt;&lt; <span class="built_in">getSum</span>(segtree, x<span class="number">-1</span>, y<span class="number">-1</span>, <span class="number">0</span>, nums.<span class="built_in">size</span>()<span class="number">-1</span>, <span class="number">1</span>) &lt;&lt; endl;;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据结构</category>
        <category>线段树</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>线段树，洛谷</tag>
      </tags>
  </entry>
</search>
