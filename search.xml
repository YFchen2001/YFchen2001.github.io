<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2021/10/31/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="quick-start">Quick Start</h2>
<h3 id="create-a-new-post">Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="run-server">Run server</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="generate-static-files">Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="deploy-to-remote-sites">Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2021/10/31/%E8%B4%AA%E5%BF%83/%E8%B4%AA%E5%BF%83%E7%AE%80%E5%8D%95%E9%A2%98/</url>
    <content><![CDATA[<h1 id="简单题">简单题</h1>
<span id="more"></span>
<h2 id="最长回文串">409.最长回文串</h2>
<p>题目</p>
<figure>
<img src="贪心简单题.assets/image-20211003164832011.png" alt="image-20211003164832011" /><figcaption aria-hidden="true">image-20211003164832011</figcaption>
</figure>
<p>方法一：贪心</p>
<p>对于这道题我们不需要知道其最长的回文串是哪个，且我们是可以随意排列的，所以我们就仅仅需要找到回文串的共性即可，且这个共性是在数量上的共性：其两边的字符必须重复出现，而奇数就仅仅出现在最中间；</p>
<p>因此，如果我们某个字符数目为偶数即可以直接加入结果，但如果为奇数，那么就必须减去，到最后再加上一；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">longestPalindrome</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[]ascii=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="string">&#x27;z&#x27;</span>+<span class="number">1</span>];<span class="comment">//数组模拟哈希表</span></span><br><span class="line">        <span class="keyword">int</span> res=<span class="number">0</span>;<span class="comment">//结果变量</span></span><br><span class="line">        <span class="keyword">boolean</span>  isMid=<span class="keyword">false</span>;<span class="comment">//是否有奇数个数的字符</span></span><br><span class="line">        <span class="comment">//数据预处理</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            ascii[s.charAt(i)]+=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//变量数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;ascii.length ; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(ascii[i]%<span class="number">2</span>!=<span class="number">0</span>)&#123;</span><br><span class="line">                isMid=<span class="keyword">true</span>;</span><br><span class="line">                res+=ascii[i]-<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                res+=ascii[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(isMid)&#123;</span><br><span class="line">            res+=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//改进版</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">longestPalindrome</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">int</span>[] cnt = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">58</span>];</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">char</span> c : s.toCharArray()) &#123;</span><br><span class="line">         cnt[c - <span class="string">&#x27;A&#x27;</span>] += <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> x: cnt) &#123;</span><br><span class="line">        <span class="comment">// 字符出现的次数最多用偶数次。</span></span><br><span class="line">        ans += x - (x &amp; <span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 如果最终的长度小于原字符串的长度，说明里面某个字符出现了奇数次，那么那个字符可以放在回文串的中间，所以额外再加一。</span></span><br><span class="line">      <span class="keyword">return</span> ans &lt; s.length() ? ans + <span class="number">1</span> : ans;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="分发饼干">455.分发饼干</h2>
<p>题目</p>
<p><img src="贪心简单题.assets/image-20211003171626512.png" alt="image-20211003171626512" /><img src="贪心简单题.assets/image-20211003171646660.png" alt="image-20211003171646660" /></p>
<p>方法一：贪心思想+排序+双指针</p>
<p>对于这道题，我们需要找到一种分发饼干的策略，然可以得到满足的孩子越多；</p>
<ul>
<li><p>小胃口优先策略</p>
<p>即：先让小胃口的孩子挑选饼干，且其挑选的饼干是大于其胃口的最小饼干；因为这样的饼干可以满足小胃口的孩子，但不一定能满足大胃口的；即使可以，那么其数目也不会发生变化，因为 一个饼干仅仅能满足一个孩子；但如果没有饼干符合小胃口的，那么后面的大胃口就更不能满足了；</p></li>
<li><p>大饼干优先策略</p>
<p>即：优先将大饼干发送给小于其的最大胃口的孩子；如果某饼干能满足小胃口但却不一定能满足大胃口，所以我们就将大的饼干优先给大胃口的，让小胃口的人数尽可能多；以便使得小的饼干也可以满足孩子</p></li>
</ul>
<p>小胃口策略</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findContentChildren</span><span class="params">(<span class="keyword">int</span>[] g, <span class="keyword">int</span>[] s)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//排序，以便确定哪些为大胃口，哪些为小的</span></span><br><span class="line">        Arrays.sort(g);</span><br><span class="line">        Arrays.sort(s);</span><br><span class="line">        <span class="keyword">int</span> gPtr=<span class="number">0</span>;<span class="comment">//胃口指针</span></span><br><span class="line">        <span class="keyword">int</span> sPtr=<span class="number">0</span>;<span class="comment">//饼干指针</span></span><br><span class="line">        <span class="keyword">int</span> res=<span class="number">0</span>;<span class="comment">//结果变量</span></span><br><span class="line">        <span class="keyword">while</span>(gPtr&lt;g.length&amp;&amp;sPtr&lt;s.length)&#123;</span><br><span class="line">            <span class="comment">//如果可以满足，就....</span></span><br><span class="line">            <span class="keyword">if</span>(g[gPtr]&lt;=s[sPtr])&#123;</span><br><span class="line">                res+=<span class="number">1</span>;</span><br><span class="line">                gPtr+=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//饼干要么被分发，要么不能被分发；不然被分发的饼干虽然可以分发给前面小胃口的孩子，但那些孩子一定已经有了饼干，不然这个饼干就不会出现在这里</span></span><br><span class="line">            sPtr+=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="数组拆分">561.数组拆分|</h2>
<p>题目</p>
<p><img src="贪心简单题.assets/image-20211003173558392.png" alt="image-20211003173558392" /><img src="贪心简单题.assets/image-20211003173610391.png" alt="image-20211003173610391" /></p>
<p>方法一：贪心</p>
<p>因为我们是想被拆分的数组的最小值的和最大，那么就要保证数组的大值到最后能够被得到；所以我们就可以贪心的然两个相聚最小的两个数分为一组，以便让大数可以得到保留;但如果想下面那样让大数去和很小的数组一起，那么另一个大数也会被分到和一个小数在一起，所以我们就要将两个相邻的数分在一起</p>
<p>比如：[1,2,3,4,5,6]--&gt;(5,6)--&gt;(4,6),(3,5)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">arrayPairSum</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//排序以便，确定那些数比较接近和大小情况</span></span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="keyword">int</span> result=<span class="number">0</span>;</span><br><span class="line">        <span class="comment">//每相邻两个为一组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = nums.length-<span class="number">1</span>; i &gt;=nums.length/<span class="number">2</span> ; i++) &#123;</span><br><span class="line">            result+=nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2021/10/31/%E8%B4%AA%E5%BF%83/%E8%B4%AA%E5%BF%83%E4%B8%AD%E7%AD%89%E9%A2%98/</url>
    <content><![CDATA[<h1 id="中等题">中等题</h1>
<h2 id="跳跃-游戏">45.跳跃 游戏||</h2>
<p>题目</p>
<figure>
<img src="贪心中等题.assets/image-20211009020722509.png" alt="image-20211009020722509" /><figcaption aria-hidden="true">image-20211009020722509</figcaption>
</figure>
<p>方法一：贪心</p>
<p>对于这道题，我们需要找到最小的步数，那么我们要如何才能找到最小步数呢？</p>
<ul>
<li>一个很直接的想法就是：有后往前遍历，因为我们是要到达最后一个结点的，所以我们就可以由最后的结点开始，寻找可以跳到该位置的最前的位置，作为其上一次起跳点，然后依此类推，得到其步数，但对于这个想法其每次寻找上一次起跳点都需要O(n);且我们会重复遍历很多的无效位置；且我们没有证明这个为什么就一定可以得到最短的路径</li>
</ul>
<p>首先，我们先来看一下，这个题目约束下跳跃间的关系是什么？</p>
<ul>
<li><p>假设我们在已经在位置i上，那么我们的起跳点就可以为i&lt;j&lt;=i+nums[i];假设我们这一步跳到g;那么其再下一次的起跳点就为g&lt;=i+nums[i]&lt;H&lt;g+nums[g];</p></li>
<li><p>为什么g+nums[g]&gt;i+nums[i]?</p>
<p>因为我们一定能够到达最后，所以一定存在g可以使得g+nums[g]&gt;i+nums[i];且因为我们是要保证跳的次数最少，所以如果我们选择了一个j,且j+nums[j]&lt;i+nums[i];那么我们就需要再额外花费一步去跳离i+nums[i]，所以其就可以选择g+nums[g]最大的那个点去跳，因为那样可以保证我们的起跳点更多，且离终点更近，另外这个也可以其他点可能跳的下一次位置</p></li>
<li><p>为什么我们下一次的起跳点一定大于i+nums[i],而不是大于g?</p>
<p>因为假设我们第二次的起跳点位k,且g&lt;k&lt;i+nums[i];那么我们就需要额外花费一次去跳离g+nums[g];因为一定可以到达最后，所以一定存在第三次起跳点z，使得z+nums[z]&gt;g+nums[g]；但是由前面可知，我们是选用g+nums[g]最大的（i&lt;g&lt;i+nums[i]），所以其z+nums[z]不可能大于g+nums[g]；所以其下一次起跳的位置一定大于i+nums[i];</p></li>
</ul>
<p>换句话讲，我们每次起跳，就可以废掉其所能到达的最大位置之前的所有位置，因为其下一次起跳点一定在最大位置之后</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">jump</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//如果长度小于2，即不用走就可以到达结尾</span></span><br><span class="line">        <span class="keyword">if</span>(nums.length&lt;<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//步数</span></span><br><span class="line">        <span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line">        <span class="comment">//当前的起跳点范围</span></span><br><span class="line">        <span class="keyword">int</span> curMax=nums[<span class="number">0</span>]+<span class="number">0</span>;</span><br><span class="line">        <span class="comment">//下一个起跳点的范围</span></span><br><span class="line">        <span class="keyword">int</span> maxDiscount=curMax;</span><br><span class="line">        <span class="comment">//注意：我们的遍历范围是0~nums.length-1;因为我们最后一个的起跳点只要有包含最后那么就证明是可以到达的，就可以结束了</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length-<span class="number">1</span>; i++) &#123;</span><br><span class="line">            maxDiscount=Math.max(maxDiscount,i+nums[i]);</span><br><span class="line">            <span class="comment">//到达最大范围，就废掉前面的，继续遍历后面的</span></span><br><span class="line">            <span class="keyword">if</span>(i==curMax)&#123;</span><br><span class="line">                count+=<span class="number">1</span>;</span><br><span class="line">                curMax=maxDiscount;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//最后一次不会进入判断，所以需要额外增加一个</span></span><br><span class="line">        count+=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="加油站">134.加油站</h2>
<p>题目</p>
<p><img src="贪心中等题.assets/image-20211009233508483.png" alt="image-20211009233508483" /><img src="贪心中等题.assets/image-20211009233528089.png" alt="image-20211009233528089" /></p>
<p>注意：其仅仅只能选择起始点，而过程就必须按部就班，按相邻的点去遍历即可，到时要记得数组是环形的，所以就必须在遍历到结尾时可以自动从节点出发，所以下标就需要有取模操作，以防止越界</p>
<h3 id="方法一贪心局部解-全局解">方法一：贪心（局部解-&gt;全局解）</h3>
<p>对于这道题，最简单的就是枚举每个位置，将其作为起点，然后遍历一圈，如果中间油量为负，即<span class="math inline">\(\sum_i^{i+gas.length}(gas[i]-cost[i])\)</span>;</p>
<p>那么该位置就一定不是起点。但是很明显这个思路会有很多不合理的枚举，比如一开始就是负的，就可以直接跳到；或是因为这道题我们必须保证在行走的过程中起每个时刻的油量必须大于等于0，所以我们在由一个<span class="math inline">\(gas(i)-cost(i)&gt;0\)</span>的位置出发，到最后的<span class="math inline">\(\sum_i^{i+j}(gas(i)-cost(j))&lt;0\)</span>的位置，我们就证明了这个起点不可以，且再由这个我们可以推出<span class="math inline">\([i,j)\)</span>中的位置均不可能成为起点 $$ 证明:因为我们需要保证我们行走过程每个时段的油量均不小于0， \ 所以既然我们可以遍历到j，就证明了遍历中途_i^{i+k}(gas(i)-cost(i))&gt;0成立; \ 假设{z,k=z+1}，且gas[k]-cost[k]&gt;=0, \ 那么_i^{i+z}(gas(i)-cost(i))&gt;=0恒成立\ 所以理论上k可以作为起点，其实我们在以i为起点的前提下，我们遍历到k的油量为\ (gas[k]-cost[k])+_i^{i+k}(gas(i)-cost(i))&gt;=(gas[k]-cost[k])\ 所以假设我们从k起点可以安全遍历一遍，那么由i起点也一定可以遍历一遍，且剩余的油量更多\ 但如果连起点i都无法遍历一圈，那么起点k就更不可以了；所以就可以直接排除[i,j]的位置；</p>
<p>$$ 所以我们就可以在枚举起点时，通过上面的两个<code>舍弃策略</code>，来假设枚举起点的次数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">canCompleteCircuit</span><span class="params">(<span class="keyword">int</span>[] gas, <span class="keyword">int</span>[] cost)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//油量</span></span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; gas.length; i++) &#123;</span><br><span class="line">            <span class="comment">//如果一开始可获得油量就为负，那么一定不是起点(第一个策略)</span></span><br><span class="line">            <span class="keyword">if</span> (gas[i] - cost[i] &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">                <span class="comment">//遍历一圈</span></span><br><span class="line">                <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; gas.length; j++) &#123;</span><br><span class="line">                    sum += (gas[(i + j) % gas.length] - cost[(i + j) % cost.length]);</span><br><span class="line">                    <span class="comment">//中途如果有小于0，就一定不是正确起点</span></span><br><span class="line">                    <span class="keyword">if</span> (sum &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//如果有遍历一圈就是正确起点，如果没有，就直接舍弃[i,i+j]位置;</span></span><br><span class="line">                <span class="keyword">if</span> (j &gt;= gas.length) &#123;</span><br><span class="line">                    <span class="keyword">return</span> i;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    i = i + j;</span><br><span class="line">                    sum = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//没有位置可以作为起点，就无解</span></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="方法二整体思想解题">方法二：整体思想解题</h3>
<p><img src="贪心中等题.assets/image-20211010005543784.png" alt="image-20211010005543784" /><img src="https://i.loli.net/2021/10/10/nDWYIajNuStVoA8.png" alt="image-20211010005649571" /></p>
<p>假设我们由起点的前一个开始，即前一个油量0，可获取油量也为0；然后不然第一个位置就是我们这道题所说的起点，起步入后，我们仅关注其可获取油量（有正有负）。如果我们由-1位置开始，那么步入的结点就是第0个下标位置，其遍历一圈到最后就如上图黑线一样。但如果我们改变起点呢？<code>其折线的形状不会发生改变，因为形状取决于相邻位置可获得油量的差距，所以形状不会变化，但是因为由不同点出发，而出发的那个点油量为0，所以我们的折线图就会沿y轴上下移动，所以我们在有解的前提下，仅仅需要保证最低点为0即可，那么我们所求的起点就是该最低点的下一个点</code>，但是我们如何判断是否有解：我们可获得的油量大于等于消耗的油量；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">canCompleteCircuit</span><span class="params">(<span class="keyword">int</span>[] gas, <span class="keyword">int</span>[] cost)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//最低点以及对应下标</span></span><br><span class="line">        <span class="keyword">int</span> minNum = gas[<span class="number">0</span>] - cost[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> minIndex = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//有0开始遍历，每个位置的剩余油量（有正有负）</span></span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; gas.length; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> temp = (gas[i] - cost[i]);</span><br><span class="line">            sum += temp;</span><br><span class="line">            <span class="comment">//找最低点</span></span><br><span class="line">            <span class="keyword">if</span> (minNum &gt;= sum) &#123;</span><br><span class="line">                minIndex = i;</span><br><span class="line">                minNum = sum;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果sum&lt;0则消耗&gt;获得，则无解</span></span><br><span class="line">        <span class="keyword">if</span> (sum &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//有解时，返回最低点的下一个点，但为了避免minIndex+1越界，所以有取模操作</span></span><br><span class="line">        <span class="keyword">return</span> (minIndex + <span class="number">1</span>) % gas.length;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="最大数">179.最大数</h2>
<p>题目</p>
<p><img src="贪心中等题.assets/image-20211010121155947.png" alt="image-20211010121155947" /><img src="https://i.loli.net/2021/10/10/OZQKgDjXUYhrsap.png" alt="image-20211010121208342" /></p>
<h3 id="方法一按结果排序">方法一：按结果排序</h3>
<p>对于这道题，我们主要的难点就是没有办法将整数拆分开，所以我们的主要难点就是：如何在没有拆分开整数的前提下，决定两个数的前后关系。</p>
<p>想法：</p>
<ul>
<li><p>是否可以像比较字符串那样：高位优先，同数降位；但是我们需要解决数位数不一的问题 <span class="math display">\[
假设x=21;y=213;那么最优排列就是213,21;\\
假设x=21;211;那么最优序列就是21,211;\\
假设x=21;2113;那么最优序列就是21,2113;\\
所以我们会发现如果像字符串那样比较，在长度不一的情况下要决定前后关系就很困难；\\
且我们还需要我们的比较是具有传递性的，但是连两数的规则都难以言明，就明显不是正确的比较方法\\
\]</span></p></li>
<li><p>是否可以按照排列结果排序：就对两个数分别进行排列,而因为这个两个数，所以排列的结果只有两个，所以比较这个结果来决定前后次序</p>
<p>对于这个我们就不需要证明两者的比较结果，因为我们就是根据结果进行排序的，而我们需要在进行证明的就是：完备性（即容易两个数都可以进行该比较，且决定唯一顺序）；传递性（即a&lt;=b,b&lt;=c--&gt;a&lt;=c）;这两个是数组可以进行排列的基础； <span class="math display">\[
\large\boldsymbol{证明:传递性a&lt;=b,b&lt;=c;}\\
设s(x)为大于x的最小的10的幂(注意:必须大于,且s(0)=10)
所以a和b排列的结果为\\
a,b=
\begin{cases}
a*s(b)+b &amp; \text{a优先b}\\
b*s(a)+a &amp; \text{b优先a}
\end{cases}\\
因为我们是根据结果排序的，所以:\\
a&lt;=b\implies a*s(b)+b&lt;=b*s(a)+a\implies a*(s(b)-1)&lt;=b*(s(a)-1); \large\boldsymbol{等式1}\\
b&lt;=c\implies b*s(c)+c&lt;=c*s(b)+b\implies b*(s(c)-1)&lt;=c*(s(b)-1);\large\boldsymbol{等式2}\\
两个式子相乘:\\
\boldsymbol{a*b&lt;=b*c\implies a*b*(s(b)-1)*(s(c)-1)&lt;=b*c*(s(a)-1)*(s(b)-1);}\large\boldsymbol{等式3}\\
其中两边有相同项：b和(s(b)-1);而由s(x)&gt;=10,所以(s(x)-1)&gt;=9恒成立\\
对于b其不为负，所以需要分类讨论\\
b=
\begin{cases}
由等式1得a&lt;=0即a=0且由等式2得c&gt;=0所以a&lt;=c
&amp;\text{if b=0,a&lt;=b,b&lt;=c;}\\\\\\
由等式3得a*(s(c)-1)&lt;=c*(s(a)-1)\implies \\a*s(c)+c&lt;=c*s(a)+a\implies{a&lt;=c}
&amp;\text{if b}\ne\text{0,a&lt;=b,b&lt;=c;}\\
\end{cases}
\\\\
证得:\large\boldsymbol{传递性a&lt;=b,b&lt;=c;}\\
\]</span></p></li>
<li><p>由上面可以知道该比较符合完备性和传递性，所以可以唯一确定排序结果</p></li>
<li><p>接着进行该排序后连接起来得字符串是否就是最优字符串？</p>
<p>假设排序后序列不是最优序列，那么就一定存在两个数，其交换后会使得序列变大；但是因为我们是按结果排序得，所以这个情况和<code>已经排列好</code>这个前提矛盾；所以排列后就为最优序列</p></li>
</ul>
<p>容易理解的代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">largestNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//先将nums转换为字符串数组</span></span><br><span class="line">        String[]Nums=<span class="keyword">new</span> String[nums.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            Nums[i]=<span class="string">&quot;&quot;</span>+nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//通过比较器定义得比较方法进行比较</span></span><br><span class="line">        <span class="comment">//比较器为：形象的进行结果比较</span></span><br><span class="line">        Arrays.sort(Nums,(n1,n2)-&gt;&#123;</span><br><span class="line">            String x=n1+n2,y=n2+n1;</span><br><span class="line">            <span class="keyword">return</span> -x.compareTo(y);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//如果判断成立，那么就证明：数组全为0，那么就仅仅只能返回一个0</span></span><br><span class="line">        <span class="keyword">if</span>(Nums[<span class="number">0</span>].equals(<span class="string">&quot;0&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;0&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//连接字符串</span></span><br><span class="line">        StringBuilder sb=<span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Nums.length; i++) &#123;</span><br><span class="line">            sb.append(Nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>效率较快的代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">largestNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//对数组进行装箱，以便后面进行比较器的排序</span></span><br><span class="line">        Integer[]Nums=<span class="keyword">new</span> Integer[nums.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            Nums[i]=nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//比较器的思路和题解的证明一样</span></span><br><span class="line">        Arrays.sort(Nums,(n1,n2)-&gt;&#123;</span><br><span class="line">            <span class="keyword">long</span> x=<span class="number">10</span>,y=<span class="number">10</span>;</span><br><span class="line">            <span class="keyword">while</span>(x&lt;=n1)&#123;</span><br><span class="line">                x*=<span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(y&lt;=n2)&#123;</span><br><span class="line">                y*=<span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> (<span class="keyword">int</span>)(-(y*n1+n2-(x*n2+n1)));</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">if</span>(Nums[<span class="number">0</span>]==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;0&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//连接起来</span></span><br><span class="line">        StringBuilder sb=<span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Nums.length; i++) &#123;</span><br><span class="line">            sb.append(Nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="性能pk">性能pk</h3>
<figure>
<img src="贪心中等题.assets/image-20211010131433298.png" alt="image-20211010131433298" /><figcaption aria-hidden="true">image-20211010131433298</figcaption>
</figure>
<h2 id="递增的三元子序列">334.递增的三元子序列</h2>
<p>题目</p>
<p><img src="贪心中等题.assets/image-20211011110212456.png" alt="image-20211011110212456" /><img src="贪心中等题.assets/image-20211011110224791.png" alt="image-20211011110224791" /></p>
<h3 id="方法一1或2或3枚举">方法一：1或2或3枚举</h3>
<h4 id="枚举2">枚举2</h4>
<p>对于这道题最简单的办法就是 暴力枚举；但是这道题的数据量而言<span class="math inline">\(O(n^3)\)</span>的开销旧太大了；但是我们可以由暴力枚举逐步优化；</p>
<p>首先我们分析一下：暴力枚举为什么开销那么大？</p>
<ul>
<li>因为对于暴力枚举而言，其最后面部分的数据被若干次重复枚举；所以其可以有很多不必要的开销。</li>
</ul>
<p>其次我们针对这道题的特殊性：递增序列，既然是递增序列，那么如果我们第一层循环枚举1或是3位置的话，那么就需要维护2和3或1和2；但是要同时枚举这两个变量会比较麻烦，因为其维护的两个位置会相互影响，且会受到后面数据的影响； <span class="math display">\[
比如:small=3,mid=5;此时cur=4,那么我们是否可以直接更新small？\\
如果直接更新mid是否还有用?\\
答：如果我们需要明确的mid和samll值的话，那么这个思路就不合适；\\因为你会发现在不同情况下其能不能直接更新是不确定的；\\当然对于这道题还是可以解的，这个等后面枚举1或3的时候会再次提及；
\]</span> 既然枚举1或3比较困难，那么我们就可以尝试枚举2；对于这个我们会明显感觉比较简单，因为我们仅仅需要维护左边的最小值已经右边的最大值；当然如果这样我们是不可以扫一遍就可以顺便维护最大值和最小值，因为我们在遍历的时候仅仅只能维护一个最值；比如：由左向右遍历就可以维护左边的最小值，但无法维护右边的最大值；</p>
<p>所以为了避免开销的数量级发生变化，那么我们就可以对数组进行预处理，用一个单调栈或是一个数组，记录其每个位置右端的最大值，后面就再扫一次以便可以判断</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">increasingTriplet</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//记录最大值的数组</span></span><br><span class="line">        <span class="keyword">int</span>[]maxNum=<span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</span><br><span class="line">        <span class="comment">//注意我们的最大值数组:maxNum[i]表示：i+1~size内的最大值，但不包括i;</span></span><br><span class="line">        maxNum[nums.length-<span class="number">1</span>]=Integer.MAX_VALUE;</span><br><span class="line">        <span class="comment">//最大值数组预处理；</span></span><br><span class="line">        <span class="keyword">int</span> maxOne=nums[nums.length-<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = nums.length-<span class="number">2</span>; i &gt;=<span class="number">0</span> ; i--) &#123;</span><br><span class="line">            maxNum[i]=maxOne;</span><br><span class="line">            maxOne=Math.max(maxOne,nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//再次遍历(反方向)并维护最小值</span></span><br><span class="line">        <span class="keyword">int</span> minOne=nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]&gt;minOne&amp;&amp;nums[i]&lt;maxNum[i])&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            minOne=Math.min(minOne,nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>但是对于这个明显无法满足其题目空间复杂度O(n)的要求，所以是否还有其他的特点，而且递增序列这个特性是否还有其他的引用？</p>
<h4 id="枚举1或3">枚举1或3</h4>
<p>我们再次回想一下我们刚才再枚举2的举例中提到的两个问题：</p>
<ul>
<li><p>那么我们是否可以直接更新small？</p></li>
<li><p>如果直接更新mid是否还有用?</p>
<p>其实这两个问题如果拆开答的话，就都是否定，但是如果是合并一起答得话，在这道题下就是可以的。</p>
<p>假设我们直接更新了small,那么很明显mid已经不是序列和值均大于small的元素值了；但是这里会隐含一个事实：如果mid有值，那么就证明其前面一定存在一个序列和值比其小的元素，虽然无法得知具体是哪个元素，但是我们可以确定一次存在这个元素；既然这样我们在下面的几种情况下就可以采取相应的确定操作： <span class="math display">\[
\begin{cases}
return &amp;true &amp;\text{cur&gt;mid}\\
mid=cur&amp;&amp;\text{cur&gt;small\&amp;\&amp;cur&lt;=mid}\\
small=cur&amp;&amp; \text{cur&lt;=small}\\
\end{cases}
\]</span></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">increasingTriplet</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.length&lt;<span class="number">3</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//该初始化就可以让前面2个元素的遍历可以和后面元素的遍历统一</span></span><br><span class="line">        <span class="comment">//整体思路和上面诉说一样，这里不做注解</span></span><br><span class="line">        <span class="keyword">int</span> min=Integer.MAX_VALUE,mid=Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]&gt;mid)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[i]&lt;=min)&#123;</span><br><span class="line">                    min=nums[i];</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    mid=nums[i];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>性能pk</p>
<figure>
<img src="贪心中等题.assets/image-20211011113736947.png" alt="image-20211011113736947" /><figcaption aria-hidden="true">image-20211011113736947</figcaption>
</figure></li>
</ul>
<h2 id="无重叠区间">435.无重叠区间</h2>
<p>题目</p>
<p><img src="贪心中等题.assets/image-20211012104313106.png" alt="image-20211012104313106" /><img src="贪心中等题.assets/image-20211012104328014.png" alt="image-20211012104328014" /></p>
<h3 id="方法一贪心局部最优推全局最优">方法一：贪心（局部最优推全局最优）</h3>
<p>对于这道题，我们需要移除区间的最少数量，也等价于寻找不重复区间的最大数量；既然要寻找不重复区间的最大数量，所以我们就需要对数组进行排序，以便来决定其代表区间在所给区间集中的位置；但是有一个难点：<code>我们要如何进行排序?</code></p>
<ul>
<li><p>如何排序？</p>
<ul>
<li><p>仅根据左端排序</p>
<p>因为其仅根据左端排序，那么我们就最大那些区间的左端部分是较大的，而对右端一无所知，仅知道右端比左端大，而因为我们要尽量多的不重复区间，所以我们就可以尽量选择左端较大的，以便有更多的地方给剩下的区间，所以我们就需要由右向左遍历；最右的那个可以直接被选择，因为其左端最大，且右端对结果不影响；然后就可以向前遍历，维护当前所选区间的最左区间的左端点；然后先前遍历寻找右端小于这个端点且左端点尽可能大的区间；就可以得到最大的不重叠区间数。</p></li>
<li><p>仅根据右端排序</p>
<p>其思想和上面一样;不过这种排列是由前向后遍历</p></li>
</ul></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">eraseOverlapIntervals</span><span class="params">(<span class="keyword">int</span>[][] intervals)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(intervals.length==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//根据右端点排序</span></span><br><span class="line">        Arrays.sort(intervals,(n1,n2)-&gt;&#123;</span><br><span class="line">            <span class="keyword">return</span> n1[<span class="number">1</span>]-n2[<span class="number">1</span>];</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//不重叠区间最大数目</span></span><br><span class="line">        <span class="keyword">int</span> result=<span class="number">1</span>;</span><br><span class="line">        <span class="comment">//当前所选区间的最左端点</span></span><br><span class="line">        <span class="keyword">int</span> right=intervals[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; intervals.length; i++) &#123;</span><br><span class="line">            <span class="comment">//遇到合适区间，就可以更新变量</span></span><br><span class="line">            <span class="keyword">if</span>(intervals[i][<span class="number">0</span>]&gt;=right)&#123;</span><br><span class="line">                result+=<span class="number">1</span>;</span><br><span class="line">                right=intervals[i][<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> intervals.length-result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>拓展：</p>
<p>如果我们根据左端点排序，那么我们还能由左向右开始遍历吗？</p>
<ul>
<li></li>
</ul>
]]></content>
  </entry>
</search>
